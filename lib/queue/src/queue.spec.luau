local Queue = require("./init")

local test_suite = function(tiniest)
	local describe = tiniest.describe
	local test = tiniest.test
	local expect = tiniest.expect

	describe("Append", function()
		test("should append values and maintain order", function()
			local queue = Queue.new()
			queue:Append(11)
			queue:Append(12)
			queue:Append(13)
			expect(queue:ToArray()).is_shallow_equal({11, 12, 13})
		end)
	end)

	describe("Prepend", function()
		test("should prepend values correctly", function()
			local queue = Queue.new()
			queue:Append(2)
			queue:Prepend(1)
			queue:Append(3)
			expect(queue:ToArray()).is_shallow_equal({1, 2, 3})
		end)
	end)

	describe("Pop", function()
		test("should pop values in FIFO order", function()
			local queue = Queue.new()
			queue:Append("a")
			queue:Append("b")
			queue:Append("c")
			expect(queue:Pop()).is("a")
			expect(queue:Pop()).is("b")
			expect(queue:Pop()).is("c")
			expect(queue:Pop()).is(nil)
		end)
	end)

	describe("Size", function()
		test("should return correct size", function()
			local queue = Queue.new()
			expect(queue:Size()).is(0)
			queue:Append(5)
			expect(queue:Size()).is(1)
			queue:Append(10)
			expect(queue:Size()).is(2)
		end)
	end)


	describe("Has", function()
		test("should check if it contains a value", function()
			local queue = Queue.new()
			queue:Append(42)
			queue:Append(100)
			expect(queue:Has(42)).is(true)
			expect(queue:Has(99)).is(false)
		end)
	end)

	describe("Peek", function()
		test("should peek at the first value without removing it", function()
			local queue = Queue.new()
			queue:Append(7)
			queue:Append(9)
			expect(queue:Peek()).is(7)
			queue:Pop()
			expect(queue:Peek()).is(9)
		end)

		test("should peek at a value at a specific index", function()
			local queue = Queue.new()
			queue:Append(1)
			queue:Append(2)
			queue:Append(3)
			expect(queue:Peek(1)).is(1)
			expect(queue:Peek(2)).is(2)
			expect(queue:Peek(3)).is(3)
		end)
	end)

	describe("RemoveFirstOccurrence", function()
		test("should remove the first occurrence of a value", function()
			local queue = Queue.new()
			queue:Append(1)
			queue:Append(2)
			queue:Append(3)
			queue:Append(2)
			expect(queue:RemoveFirstOccurrence(2)).is(true)
			expect(queue:ToArray()).is_shallow_equal({1, 3, 2})
			expect(queue:RemoveFirstOccurrence(2)).is(true)
			expect(queue:RemoveFirstOccurrence(2)).is(false)
		end)
	end)

	describe("RemoveAllOccurrences", function()
		test("should remove all occurrences of a value", function()
			local queue = Queue.new()
			queue:Enqueue(1)
			queue:Enqueue(2)
			queue:Enqueue(3)
			queue:Enqueue(2)
			queue:Enqueue(4)
			queue:Enqueue(2)
	
			expect(queue:RemoveAllOccurrences(2)).is(3)
	
			expect(queue:Dequeue()).is(1)
			expect(queue:Dequeue()).is(3)
			expect(queue:Dequeue()).is(4)
			expect(queue:IsEmpty()).is(true)
		end)
	
		test("should return 0 if the value does not exist", function()
			local queue = Queue.new()
			queue:Enqueue(1)
			queue:Enqueue(3)
			queue:Enqueue(5)
	
			expect(queue:RemoveAllOccurrences(2)).is(0)
	
			expect(queue:Dequeue()).is(1)
			expect(queue:Dequeue()).is(3)
			expect(queue:Dequeue()).is(5)
			expect(queue:IsEmpty()).is(true)
		end)
	
		test("should remove all elements if all match", function()
			local queue = Queue.new()
			queue:Enqueue(7)
			queue:Enqueue(7)
			queue:Enqueue(7)
	
			expect(queue:RemoveAllOccurrences(7)).is(3)
	
			expect(queue:IsEmpty()).is(true)
		end)
	
		test("should handle removing from an empty queue", function()
			local queue = Queue.new()
			expect(queue:RemoveAllOccurrences(10)).is(0)
			expect(queue:IsEmpty()).is(true)
		end)
	
		test("should maintain order of remaining elements", function()
			local queue = Queue.new()
			queue:Enqueue(1)
			queue:Enqueue(2)
			queue:Enqueue(3)
			queue:Enqueue(2)
			queue:Enqueue(4)
	
			expect(queue:RemoveAllOccurrences(2)).is(2)
	
			expect(queue:Dequeue()).is(1)
			expect(queue:Dequeue()).is(3)
			expect(queue:Dequeue()).is(4)
			expect(queue:IsEmpty()).is(true)
		end)
	end)

	describe("RemoveValueAt", function()
		test("should remove an item at a specific index", function()
			local queue = Queue.new()
			queue:Append("x")
			queue:Append("y")
			queue:Append("z")
			local item = queue:RemoveValueAt(2)
			expect(item).is("y")
			expect(queue:ToArray()).is_shallow_equal({"x", "z"})
		end)

		test("should remove the item at the start", function()
			local queue = Queue.new()
			queue:Append("x")
			queue:Append("y")
			queue:Append("z")
			local item = queue:RemoveValueAt(1)
			expect(item).is("x")
			expect(queue:ToArray()).is_shallow_equal({"y", "z"})
		end)

		test("should remove the item at the end", function()
			local queue = Queue.new()
			queue:Append("x")
			queue:Append("y")
			queue:Append("z")
			local item = queue:RemoveValueAt(3)
			expect(item).is("z")
			expect(queue:ToArray()).is_shallow_equal({"x", "y"})
		end)

		test("should fail if there is nothing", function()
			local queue = Queue.new()
			local item = queue:RemoveValueAt(2)
			expect(item).is(nil)
		end)
	end)

	describe("__METAMETHODS", function()
		describe("__iter", function()
			test("should iterate over all values", function()
				local queue = Queue.new()
				queue:Push(11)
				queue:Push(12)
				queue:Push(13)
				queue:Push(14)
				queue:Pop()
				local values = {}
				for _, value in queue do
					table.insert(values, value)
				end
				expect(values).is_shallow_equal({12, 13, 14})
			end)
		end)
	
		describe("__tostring", function()
			test("should return a string representation of the queue", function()
				local queue = Queue.new()
				queue:Append(1)
				queue:Append(2)
				queue:Append(3)
				expect(tostring(queue)).is("<Queue> {1, 2, 3}")
			end)
		end)
	
		describe("__len", function()
			test("should return the size of the queue", function()
				local queue = Queue.new()
				expect(#queue).is(0)
				queue:Append(1)
				expect(#queue).is(1)
				queue:Append(2)
				expect(#queue).is(2)
			end)
		end)
	end)

end

return test_suite