{
  // Place your Orion workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Class": {
    "scope": "luau",
    "prefix": "class",
    "body": [
      "local BaseObject = require(\"@Packages/BaseObject\")",
      "local SuperClass = BaseObject",
      "",
      "--------------------------------------------------------------------------------",
      "--// CLASS //--",
      "--------------------------------------------------------------------------------",
      "",
      "local ${TM_FILENAME_BASE} = setmetatable({}, SuperClass)",
      "${TM_FILENAME_BASE}.ClassName = \"${TM_FILENAME_BASE}\"",
      "${TM_FILENAME_BASE}.__index = ${TM_FILENAME_BASE}",
      "",
      "function ${TM_FILENAME_BASE}.new()",
      "\tlocal self = setmetatable(SuperClass.new(), ${TM_FILENAME_BASE})\n",
      "\t$0",
      "\treturn self",
      "end",
      "function ${TM_FILENAME_BASE}:Destroy()",
      "\tSuperClass.Destroy(self) -- DO NOT REMOVE",
      "end",
      "",
      "return ${TM_FILENAME_BASE}"
    ]
  },
  "StoryFBase": {
    "scope": "luau",
    "prefix": "storyfbase",
    "body": [
      "local Class = require(\"$0\")",
      "",
      "return function(target: ScreenGui)",
      "\tlocal Object = Class {}",
      "",
      "\tlocal thread = task.defer(function()",
      "\t\t -- Write testcode here",
      "\tend)",
      "",
      "\tif typeof(Object) == \"table\" then -- If it is an FBase",
      "\t\tObject = Object:GetInstance()",
      "\tend",
      "",
      "\tObject.Parent = target",
      "",
      "\treturn function()",
      "\t\ttask.cancel(thread)",
      "\t\tObject:Destroy()",
      "\tend",
      "end"
    ]
  },
  "Story": {
    "scope": "luau",
    "prefix": "story",
    "body": [
      "local Class = require(\"$0\")",
      "",
      "return function(target: ScreenGui)",
      "\tlocal Object = Class {}",
      "",
      "\tlocal thread = task.defer(function()",
      "\t\t -- Write testcode here",
      "\tend)",
      "",
      "\tObject.Parent = target",
      "",
      "\treturn function()",
      "\t\ttask.cancel(thread)",
      "\t\tObject:Destroy()",
      "\tend",
      "end"
    ]
  },
  // RAIL's SNIPPETS! //
  "Preamble": {
    "prefix": "preamble",
    "body": [
      "-- Authors: ${1:NAME}",
      "-- $CURRENT_MONTH_NAME $CURRENT_DATE, $CURRENT_YEAR",
      "--[=[",
      "\t@class ${TM_FILENAME_BASE}",
      "]=]",
      "",
      "--// Imports //--",
      "${0}"
    ],
  },
  "Import": {
    "prefix": "import",
    "body": [
      "local ${1:Name} = require(\"${2}${1:Name}\")",
    ]
  },
  "ImportPackage": {
    "prefix": "importpackage",
    "body": [
      "local ${1:Name} = require(\"@Packages/${1:Name}\")",
    ]
  },
  "ImportServerPackage": {
    "prefix": "importserverpackage",
    "body": [
      "local ${1:Name} = require(\"@ServerPackages/${1:Name}\")",
    ]
  },
  "ImportClient": {
    "prefix": "importclient",
    "body": [
      "local ${1:Name} = require(\"@Client/${2}/${1:Name}\")",
    ]
  },
  "ImportServer": {
    "prefix": "importserver",
    "body": [
      "local ${1:Name} = require(\"@Server/${2}/${1:Name}\")",
    ]
  },
  "ImportShared": {
    "prefix": "importshared",
    "body": [
      "local ${1:Name} = require(\"@Shared/${2}/${1:Name}\")",
    ]
  },
  "Method": {
    "prefix": "method",
    "body": [
      "--[=[",
      "\t",
      "]=]",
      "function ${TM_FILENAME_BASE}:${1:MethodName}(${2})${3}",
      "\t${0}",
      "end",
    ],
  },
  "Section Header": {
    "prefix": [
      "sectionheader"
    ],
    "body": [
      "--------------------------------------------------------------------------------",
      "\t--// ${0:SectionName} //--",
      "--------------------------------------------------------------------------------",
    ],
    "description": "An organizational header for a code section."
  },
  "Service": {
    "scope": "luau",
    "prefix": "service",
    "body": [
      "local Roam = require(\"@Packages/Roam\")",
      "",
      "--------------------------------------------------------------------------------",
      "--// Service //--",
      "--------------------------------------------------------------------------------",
      "",
      "local ${TM_FILENAME_BASE} = {}",
      "",
      "-- Initialize properties of the service",
      "function ${TM_FILENAME_BASE}:RoamInit()${0}",
      "end",
      "",
      "-- Begin the service's jobs",
      "function ${TM_FILENAME_BASE}:RoamStart()",
      "end",
      "",
      "--------------------------------------------------------------------------------",
      "--// Registration and Return //--",
      "--------------------------------------------------------------------------------",
      "",
      "Roam.registerService(${TM_FILENAME_BASE}, \"${TM_FILENAME_BASE}\")",
      "return ${TM_FILENAME_BASE}"
    ]
  },
  "ServiceWithNetworking": {
    "scope": "luau",
    "prefix": "servicewithnetworking",
    "body": [
      "local Roam = require(\"@Packages/Roam\")",
      "local NetWire = require(\"@Packages/NetWire\")",
      "",
      "--------------------------------------------------------------------------------",
      "--// Service //--",
      "--------------------------------------------------------------------------------",
      "",
      "local ${TM_FILENAME_BASE} = {}",
      "${TM_FILENAME_BASE}.Client = {}",
      "",
      "",
      "function ${TM_FILENAME_BASE}:RoamStart()${0}",
      "end",
      "",
      "function ${TM_FILENAME_BASE}:RoamInit()",
      "\tNetWire.setupServiceNetworking(self)",
      "end",
      "",
      "--------------------------------------------------------------------------------",
      "--// Registration and Return //--",
      "--------------------------------------------------------------------------------",
      "",
      "Roam.registerService(${TM_FILENAME_BASE}, \"${TM_FILENAME_BASE}\")",
      "return ${TM_FILENAME_BASE}"
    ]
  },
  "Controller": {
    "scope": "luau",
    "prefix": "controller",
    "body": [
      "local Roam = require(\"@Packages/Roam\")",
      "local NetWire = require(\"@Packages/NetWire\")",
      "",
      "--------------------------------------------------------------------------------",
      "--// Controller //--",
      "--------------------------------------------------------------------------------",
      "",
      "local ${TM_FILENAME_BASE} = {}",
      "",
      "",
      "function ${TM_FILENAME_BASE}:RoamStart()",
      "end",
      "",
      "function ${TM_FILENAME_BASE}:RoamInit()",
      "\tself.Server = NetWire.Client(\"${0}\")",
      "end",
      "--------------------------------------------------------------------------------",
      "--// Registration and Return //--",
      "--------------------------------------------------------------------------------",
      "",
      "Roam.registerService(${TM_FILENAME_BASE}, \"${TM_FILENAME_BASE}\")",
      "return ${TM_FILENAME_BASE}"
    ]
  },
  "FusionComponent": {
    "scope": "luau",
    "prefix": "fusioncomponent",
    "body": [
      "local Fusion = require(\"@Packages/Fusion\")",
      "",
      "local New = Fusion.New",
      "local Value = Fusion.Value",
      "local Computed = Fusion.Computed",
      "",
      "type Value<T> = Fusion.Value<T>",
      "type State<T> = Fusion.StateObject<T>",
      "type UsedAs<T> = Fusion.UsedAs<T>",
      "",
      "--------------------------------------------------------------------------------",
      "\t--// Component //--",
      "--------------------------------------------------------------------------------",
      "",
      "return function(props: {})",
      "",
      "\treturn New \"${1:Frame}\" {",
      "\t\t$0",
      "\t}",
      "end"
    ]
  },
  "FBaseComponent": {
    "scope": "luau",
    "prefix": "fbasecomponent",
    "body": [
      "local Fusion = require(\"@Packages/Fusion\")",
      "local FusionOnRails = Import(\"@Packages/FusionOnRails\")",
      "local SuperClass = FusionOnRails.FBase",
      "",
      "local New = Fusion.New",
      "local Value = Fusion.Value",
      "local Computed = Fusion.Computed",
      "",
      "type Value<T> = Fusion.Value<T>",
      "type State<T> = Fusion.StateObject<T>",
      "type CanBeState<T> = Fusion.CanBeState<T>",
      "",
      "--------------------------------------------------------------------------------",
      "\t--// Component //--",
      "--------------------------------------------------------------------------------",
      "",
      "local ${TM_FILENAME_BASE} = setmetatable({}, SuperClass)",
      "${TM_FILENAME_BASE}.ClassName = \"${TM_FILENAME_BASE}\"",
      "${TM_FILENAME_BASE}.__index = ${TM_FILENAME_BASE}",
      "${TM_FILENAME_BASE}.__call = function(t, ...)",
      "\treturn t.new(...)",
      "end",
      "",
      "",
      "function ${TM_FILENAME_BASE}.new(props: {})",
      "\tlocal self = setmetatable(SuperClass.new(), ${TM_FILENAME_BASE})",
      "",
      "\tself:Bind(\"Frame\", {",
      "\t\t$0",
      "\t})",
      "",
      "\treturn self",
      "end",
      "",
      "",
      "return ${TM_FILENAME_BASE}"
    ]
  },
  "InstanceComponent": {
    "prefix": [
      "instancecomponent"
    ],
    "body": [
      "local Component = require(\"@Packages/Component\")",
      "local BaseComponent = require(\"@Packages/BaseComponent\")",
      "",
      "--------------------------------------------------------------------------------",
      "\t--// Component Declaration //--",
      "--------------------------------------------------------------------------------",
      "",
      "--// Class Setup //--",
      "local ${1:$TM_FILENAME_BASE} = Component.new({",
      "\tTag = \"${2:$TM_FILENAME_BASE}\";",
      "\tAncestors = {workspace};",
      "\tExtensions = {BaseComponent};",
      "})",
      "",
      "--------------------------------------------------------------------------------",
      "\t--// Methods //--",
      "--------------------------------------------------------------------------------",
      "",
      "--------------------------------------------------------------------------------",
      "\t--// Initialization //--",
      "--------------------------------------------------------------------------------",
      "",
      "function ${1:$TM_FILENAME_BASE}:Construct()",
      "\t${0}",
      "end",
      "",
      "function ${1:$TM_FILENAME_BASE}:Start()",
      "end",
      "",
      "function ${1:$TM_FILENAME_BASE}:Stop()",
      "end",
      "",
      "return ${1:$TM_FILENAME_BASE}"
    ],
    "description": "A Sleitnick Instance Component"
  },
  "MoonwaveType": {
    "scope": "luau",
    "prefix": "moonwavetype",
    "body": [
      "--[=[",
      "\t@within $TM_FILENAME_BASE",
      "\t@type ${0:TypeName}",
      "]=]"
    ]
  },
  "MoonwaveInterface": {
    "scope": "luau",
    "prefix": "moonwaveinterface",
    "body": [
      "--[=[",
      "\t@within $TM_FILENAME_BASE",
      "\t@interface ${1:InterfaceName}",
      "\t${0}",
      "]=]"
    ]
  },
}