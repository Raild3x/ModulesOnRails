"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4794],{10419:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new heap with a custom comparator.\\n\\n\\n```lua\\nlocal personA = { name = \\"Alice\\", age = 25 }\\nlocal personB = { name = \\"Bob\\", age = 30 }\\nlocal personC = { name = \\"Charlie\\", age = 20 }\\n\\n\\nlocal youngestPersonHeap = Heap.new(function(a, b)\\n    return a.age < b.age\\nend)\\n\\nminHeap:Push(personA)\\nprint(minHeap:Peek()) -- { name = \\"Alice\\", age = 25 }\\nminHeap:Push(personB)\\nprint(minHeap:Peek()) -- { name = \\"Alice\\", age = 25 }\\nminHeap:Push(personC)\\nprint(minHeap:Peek()) -- { name = \\"Charlie\\", age = 20 }\\n```","params":[{"name":"comparator","desc":"A function that defines the heap ordering.","lua_type":"(a: T, b: T) -> boolean"}],"returns":[{"desc":"A new heap instance.","lua_type":"Heap<T>"}],"function_type":"static","source":{"line":86,"path":"lib/heap/src/init.luau"}},{"name":"min","desc":"Creates a min-heap where the smallest element is always on top.","params":[],"returns":[{"desc":"A min-heap instance.","lua_type":"Heap<T>"}],"function_type":"static","source":{"line":98,"path":"lib/heap/src/init.luau"}},{"name":"max","desc":"Creates a max-heap where the largest element is always on top.","params":[],"returns":[{"desc":"A max-heap instance.","lua_type":"Heap<T>"}],"function_type":"static","source":{"line":106,"path":"lib/heap/src/init.luau"}},{"name":"Push","desc":"Inserts a value into the heap.","params":[{"name":"value","desc":"","lua_type":"T"}],"returns":[],"function_type":"method","source":{"line":113,"path":"lib/heap/src/init.luau"}},{"name":"Pop","desc":"Removes and returns the top value from the heap.","params":[],"returns":[{"desc":"","lua_type":"T?\\r\\n"}],"function_type":"method","source":{"line":121,"path":"lib/heap/src/init.luau"}},{"name":"Peek","desc":"Returns the top value from the heap without removing it.","params":[],"returns":[{"desc":"","lua_type":"T?\\r\\n"}],"function_type":"method","source":{"line":134,"path":"lib/heap/src/init.luau"}},{"name":"Has","desc":"Checks if the heap contains a specified value.","params":[{"name":"valueToCheck","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","source":{"line":141,"path":"lib/heap/src/init.luau"}},{"name":"Size","desc":"Returns the number of elements in the heap.","params":[],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"method","source":{"line":148,"path":"lib/heap/src/init.luau"}},{"name":"RemoveFirst","desc":"Removes the first occurrence of a given value from the heap.\\nHeaps are not optimized for removals, so this method should\\nbe used sparingly.","params":[{"name":"value","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","source":{"line":157,"path":"lib/heap/src/init.luau"}},{"name":"RemoveAll","desc":"Removes all occurrences of a value from the heap and returns the number of occurrences removed.","params":[{"name":"value","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"method","source":{"line":174,"path":"lib/heap/src/init.luau"}},{"name":"_heapifyUp","desc":"Restores the heap order by moving a node up.","params":[{"name":"index","desc":"The index to adjust.","lua_type":"number"}],"returns":[],"function_type":"method","private":true,"source":{"line":198,"path":"lib/heap/src/init.luau"}},{"name":"_heapifyDown","desc":"Restores the heap order by moving a node down.","params":[{"name":"index","desc":"The index to adjust.","lua_type":"number"}],"returns":[],"function_type":"method","private":true,"source":{"line":217,"path":"lib/heap/src/init.luau"}},{"name":"__len","desc":"Metamethod for the len operator `#`.\\nReturns the number of elements in the heap.","params":[],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"method","private":true,"source":{"line":241,"path":"lib/heap/src/init.luau"}},{"name":"__tostring","desc":"Metamethod for tostring.\\nAttempts to return a string representation of the heap in a tree like display.","params":[],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"method","private":true,"source":{"line":250,"path":"lib/heap/src/init.luau"}}],"properties":[],"types":[],"name":"Heap","desc":"A generic heap implementation supporting both min-heap, max-heap, and custom comparators.\\n\\nHeaps are useful datastructures for tracking the smallest or largest element in an array.\\nThey are commonly used in algorithms like Dijkstra\'s shortest path algorithm and Huffman coding.\\n\\n```lua\\nlocal minHeap = Heap.min()\\nminHeap:Push(5)\\nminHeap:Push(2)\\nminHeap:Push(8)\\nprint(minHeap:Peek()) -- 2\\n```\\n\\n```lua\\nlocal maxHeap = Heap.max()\\nmaxHeap:Push(5)\\nmaxHeap:Push(2)\\nmaxHeap:Push(8)\\nprint(maxHeap:Peek()) -- 8\\n```\\n\\n:::info MetaMethods\\nSupports the following metamethods:\\n- `__tostring`: Returns a string representation of the heap in a tree like display.\\n- `__len`: Returns the number of elements in the heap. Equivalent to calling `:Size()`.","source":{"line":30,"path":"lib/heap/src/init.luau"}}')}}]);