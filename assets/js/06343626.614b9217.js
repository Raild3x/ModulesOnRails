"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7328],{38752:e=>{e.exports=JSON.parse('{"functions":[{"name":"unpack","desc":"Splits a Vector into its components.","params":[{"name":"Vector","desc":"","lua_type":"Vector"}],"returns":[{"desc":"","lua_type":"...number"}],"function_type":"static","source":{"line":44,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"snap","desc":"Snaps a Vector to the nearest multiple of the given number for each coordinate.","params":[{"name":"vector","desc":"","lua_type":"T & Vector"},{"name":"snapToNearestMultiple","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Vector\\r\\n"}],"function_type":"static","source":{"line":54,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"roundLength","desc":"Rounds a Vectors length to the nearest multiple of the given number.","params":[{"name":"vector","desc":"","lua_type":"T & Vector"},{"name":"increment","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"T\\r\\n"}],"function_type":"static","tags":["Vector2","Vector3"],"source":{"line":73,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"randomUnitVector","desc":"Returns a random unit vector3. Evenly distributes around the unit sphere.","params":[],"returns":[{"desc":"","lua_type":"Vector3\\r\\n"}],"function_type":"static","source":{"line":81,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"truncate","desc":"Truncates the length of a vector such that if it exceeds the given length, it will be truncated to that length.","params":[{"name":"Vector","desc":"The vector to truncate.","lua_type":"T & Vector"},{"name":"maxLength","desc":"The maximum length of the vector.","lua_type":"number"}],"returns":[{"desc":"The truncated vector.","lua_type":"Vector"}],"function_type":"static","source":{"line":91,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"getAngle","desc":"Returns the angle of a Vector2 relative to the X axis.","params":[{"name":"vector","desc":"","lua_type":"Vector2"}],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"static","source":{"line":102,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"getAngleBetween","desc":"Returns the shortest angle between two vectors in Radians.","params":[{"name":"firstVector","desc":"","lua_type":"Vector"},{"name":"secondVector","desc":"","lua_type":"Vector"}],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"static","source":{"line":109,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"getSignedAngleBetweenVector3s","desc":"Returns a signed angle in radians between two Vector3s around a given axis.\\nThe sign is calculated counter-clockwise, left of first vector is positive, right of first vector is negative.","params":[{"name":"firstVector","desc":"The start of the angle","lua_type":"Vector3"},{"name":"secondVector","desc":"The end of the angle","lua_type":"Vector3"},{"name":"axis","desc":"The axis to rotate around","lua_type":"Vector3"}],"returns":[{"desc":"The signed angle between the two vectors in radians.","lua_type":"number"}],"function_type":"static","source":{"line":121,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"getSignedAngleBetweenVector2s","desc":"Returns a signed angle in radians between two vectors.\\nThe sign is calculated counter-clockwise, left of first\\nvector is positive, right of first vector is negative.","params":[{"name":"firstVector","desc":"The start of the angle","lua_type":"Vector2"},{"name":"secondVector","desc":"The end of the angle","lua_type":"Vector2"}],"returns":[{"desc":"The signed angle between the two vectors in radians.","lua_type":"number"}],"function_type":"static","source":{"line":145,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"isNaN","desc":"Returns a CFrame that ... [DOCUMENTATION NEEDED] (Used for Slerping)","params":[{"name":"vector","desc":"","lua_type":"Vector"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","ignore":true,"source":{"line":153,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"isNaN","desc":"Checks if a given vector is NaN.","params":[{"name":"vector","desc":"","lua_type":"Vector"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":164,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"abs","desc":"Returns the absolute value of the Vector","params":[{"name":"Vector","desc":"","lua_type":"T & Vector"}],"returns":[{"desc":"","lua_type":"T\\r\\n"}],"function_type":"static","source":{"line":171,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"sign","desc":"Returns a Vector where each component is the sign of the original Vector.","params":[{"name":"Vector","desc":"","lua_type":"T & Vector"}],"returns":[{"desc":"","lua_type":"T\\r\\n"}],"function_type":"static","source":{"line":181,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"normalize","desc":"Safely Normalizes a Vector.","params":[{"name":"Vector","desc":"","lua_type":"T & Vector"}],"returns":[{"desc":"","lua_type":"T\\r\\n"}],"function_type":"static","source":{"line":191,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"flattenY","desc":"Flattens a Vector3 on its Y axis","params":[{"name":"Vector","desc":"The Vector3 to flatten.","lua_type":"Vector3"},{"name":"newY","desc":"the height to flatten the vector to. Defaults to 0.","lua_type":"number?"}],"returns":[{"desc":"The flattened Vector3.","lua_type":"Vector3"}],"function_type":"static","source":{"line":201,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"flatten","desc":"Flattens a given Vector3 on a specified axis","params":[{"name":"Vector","desc":"The Vector3 to flatten.","lua_type":"Vector3"},{"name":"axis","desc":"The axis to flatten the vector on. Defaults to \\"Y\\".","lua_type":"Enum.Axis"},{"name":"defaultValue","desc":"The value to set the flattened axis to. Defaults to 0.","lua_type":"number?"}],"returns":[{"desc":"The flattened Vector3.","lua_type":"Vector3"}],"function_type":"static","source":{"line":212,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"getAxis","desc":"Takes a Vector and removes all values except the specified Axis.","params":[{"name":"vector","desc":"The Vector to pull from","lua_type":"Vector3"},{"name":"axis","desc":"The axis to get","lua_type":"Enum.Axis"}],"returns":[{"desc":"The returned Vector containing only the specified axis.","lua_type":"Vector3"}],"function_type":"static","source":{"line":231,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"setAxis","desc":"Takes a Vector and sets the axis value to the specified number.","params":[{"name":"vector","desc":"The Vector to change from","lua_type":"Vector3"},{"name":"axis","desc":"The axis to set","lua_type":"Enum.Axis"},{"name":"value","desc":"The new value of the axis","lua_type":"number"}],"returns":[{"desc":"The adjusted Vector","lua_type":"Vector3"}],"function_type":"static","source":{"line":242,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"rotateVector3","desc":"Rotates a vector about its axis by the given angles.\\nTakes a CFrame.Angles object as the angles to rotate by. Works similarly to rotating a CFrame.\\n\\nrotateVector(Vector3.new(1,0,0), CFrame.Angles(0,math.pi,0)) -- Output: Vector3.new(-1,0,0)","params":[{"name":"vectorToRotate","desc":"The vector to rotate.","lua_type":"Vector3"},{"name":"anglesToRotate","desc":"The angles to rotate the vector by.","lua_type":"({number} | Vector3 | CFrame)"}],"returns":[{"desc":"The rotated vector.","lua_type":"Vector3"}],"function_type":"static","source":{"line":263,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"rotateVector2","desc":"Rotates a vector2 by a given amount of radians.","params":[{"name":"vectorToRotate","desc":"The vector to rotate.","lua_type":"Vector2"},{"name":"angle","desc":"The angle [In Radians] to rotate the vector by.","lua_type":"number"}],"returns":[{"desc":"The rotated vector.","lua_type":"Vector2"}],"function_type":"static","source":{"line":281,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"rotateVector","desc":"Rotates a vector.","params":[{"name":"vector","desc":"","lua_type":"Vector"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Vector"}],"function_type":"static","ignore":true,"source":{"line":296,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"closestPointOnLine","desc":"Finds the closest point on a line to a given point.","params":[{"name":"refPoint","desc":"The point to find the closest point to.","lua_type":"Vector3"},{"name":"linePoint","desc":"A point along the line.","lua_type":"Vector3"},{"name":"lineDirection","desc":"The direction of the line.","lua_type":"Vector3"}],"returns":[{"desc":"The closest point on the line to the reference point.","lua_type":"Vector3"}],"function_type":"static","source":{"line":312,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"closestPointsBetweenLines","desc":"Finds the closest two points on two lines.\\nThe lines are defined by some point along them and a direction","params":[{"name":"point1","desc":"A point along the first line.","lua_type":"Vector3"},{"name":"direction1","desc":"The direction of the first line.","lua_type":"Vector3"},{"name":"point2","desc":"A point along the second line.","lua_type":"Vector3"},{"name":"direction2","desc":"The direction of the second line.","lua_type":"Vector3"}],"returns":[{"desc":"The closest point on the first line.","lua_type":"Vector2"},{"desc":"The closest point on the second line.","lua_type":"Vector2"}],"function_type":"static","source":{"line":327,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"planeIntersectionPoint","desc":"Finds the intersection point of a line and a plane.","params":[{"name":"lineOrigin","desc":"A point along the line.","lua_type":"Vector3"},{"name":"lineDirection","desc":"The direction of the line.","lua_type":"Vector3"},{"name":"planeOrigin","desc":"A point on the plane.","lua_type":"Vector3"},{"name":"planeNormal","desc":"The normal of the plane.","lua_type":"Vector3"}],"returns":[{"desc":"The intersection point of the line and the plane if one exists.","lua_type":"Vector3?"}],"function_type":"static","source":{"line":351,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"lineIntersectsSphere","desc":"Tests whether or not a line of infinite length intersects a sphere at some point.","params":[{"name":"lineOrigin","desc":"A point along the line.","lua_type":"Vector3"},{"name":"lineDirection","desc":"The direction of the line.","lua_type":"Vector3"},{"name":"sphereOrigin","desc":"The origin of the sphere.","lua_type":"Vector3"},{"name":"sphereRadius","desc":"The radius of the sphere.","lua_type":"number"}],"returns":[{"desc":"Whether or not the line intersects the sphere.","lua_type":"boolean"}],"function_type":"static","source":{"line":371,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"lineSegmentIntersectsSphere","desc":"Tests whether or not a line **segment** intersects a sphere at some point.\\nOnly returns true if the intersection point is between the two points of the line segment.","params":[{"name":"linePoint1","desc":"The start point of the line segment.","lua_type":"Vector3"},{"name":"linePoint2","desc":"The end point of the line segment.","lua_type":"Vector3"},{"name":"sphereOrigin","desc":"The center point of the sphere.","lua_type":"Vector3"},{"name":"sphereRadius","desc":"The radius of the sphere.","lua_type":"number"}],"returns":[{"desc":"Whether or not the line segment intersects the sphere.","lua_type":"boolean"}],"function_type":"static","source":{"line":387,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"calculatePlaneFromPoints","desc":"Creates a plane from three points. The normal of the plane is determined by the input order of the points.\\nPlanes are used by other RailUtil.Vector functions in order to allow precomputation.","params":[{"name":"p1","desc":"The first point.","lua_type":"Vector3"},{"name":"p2","desc":"The second point.","lua_type":"Vector3"},{"name":"p3","desc":"The third point.","lua_type":"Vector3"}],"returns":[{"desc":"The plane defined by the three points.","lua_type":"Plane"}],"function_type":"static","source":{"line":413,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"calculatePlaneFromPointAndNormal","desc":"Creates a plane from a point and a normal.\\nPlanes are used by other RailUtil.Vector functions in order to allow precomputation.","params":[{"name":"point","desc":"A point on the plane.","lua_type":"Vector3"},{"name":"normal","desc":"The normal of the plane.","lua_type":"Vector3"}],"returns":[{"desc":"The plane defined by the point and normal.","lua_type":"Plane"}],"function_type":"static","source":{"line":425,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"pointLiesOnPlane","desc":"Checks if a point lies on a plane. Use one of the `calculatePlane` functions to generate a plane.\\n\\n```lua\\nlocal plane = VectorUtil.calculatePlaneFromPoints(Vector3.new(0,0,0), Vector3.new(1,0,0), Vector3.new(0,1,0))\\nlocal point = Vector3.new(1,1,0)\\n\\nVectorUtil.pointLiesOnPlane(point plane) -- Output: true\\n```","params":[{"name":"point","desc":"The point to check.","lua_type":"Vector3"},{"name":"plane","desc":"The plane to check against.","lua_type":"Plane"}],"returns":[{"desc":"Whether or not the point lies on the plane.","lua_type":"boolean"}],"function_type":"static","source":{"line":443,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"projectVectorToPlane","desc":"Projects a vector onto a plane defined by a normal.\\n\\n```lua\\nlocal dir = Vector3.new(1, 1, 1)\\nlocal normal = Vector3.new(0, 1, 0)\\n\\nVectorUtil.projectVectorToPlane(dir, normal) -- Output: Vector3.new(1, 0, 1)\\n```","params":[{"name":"dir","desc":"The vector to project.","lua_type":"Vector3"},{"name":"normal","desc":"The normal of the plane to project onto. Defaults to Vector3.new(0, 1, 0).","lua_type":"Vector3?"}],"returns":[{"desc":"The projected vector.","lua_type":"Vector3"}],"function_type":"static","source":{"line":461,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"pointInPolygon2D","desc":"Checks if a point is inside a polygon defined by a set of points.\\nThe points *must* be in order within the array, this order defines the winding of the polygon.\\n\\n\\n```lua\\nlocal point = Vector2.new(0, 0)\\nlocal polygon = {\\n\\tVector2.new(1, 0),\\n\\tVector2.new(0, 1),\\n\\tVector2.new(0, 0)\\n}\\n\\nVectorUtil.pointInPolygon2D(point, polygon) -- Output: true\\n```","params":[{"name":"point","desc":"The point to check.","lua_type":"Vector2"},{"name":"polygon","desc":"The polygon to check against.","lua_type":"{Vector2}"}],"returns":[{"desc":"Whether or not the point is inside the polygon.","lua_type":"boolean"}],"function_type":"static","source":{"line":492,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"pointInPolygon3D","desc":"Checks if a point is inside a polygon defined by a set of points and a normal. The polygon has infinite height, extending in both directions\\nof the surface normal. The points that define the polygon must be in order within the array if you aren\'t using the Hull flag.\\nThe order of the points defines the winding of the polygon.\\n\\nAllows for checking against the convex hull of the polygon by setting the `_useHull` parameter to true.\\nThis should be used only when needed as it can result in a higher computational cost in some scenarios.\\n\\n\\n```lua\\nlocal point = Vector3.new(0, 0, 0)\\nlocal polygon = {\\n\\tVector3.new(1, 0, 0),\\n\\tVector3.new(0, 1, 0),\\n\\tVector3.new(0, 0, 1)\\n}\\nlocal normal = Vector3.new(1, 1, 1)\\n\\nVectorUtil.pointInPolygon3D(point, polygon, normal) -- Output: true\\n```","params":[{"name":"point","desc":"The point to check.","lua_type":"Vector3"},{"name":"polygon","desc":"The polygon to check against.","lua_type":"{Vector3}"},{"name":"_normal","desc":"The normal of the polygon. Defaults to Vector3.new(0, 1, 0).","lua_type":"Vector3?"},{"name":"_useHull","desc":"Whether or not to use the convex hull of the polygon. Defaults to false.","lua_type":"boolean?"}],"returns":[{"desc":"Whether or not the point is inside the polygon.","lua_type":"boolean"}],"function_type":"static","source":{"line":538,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"calculateConvexHullGrahamScan","desc":"Uses Graham\'s scan algorithm to calculate the convex hull of a set of 2D points.\\nGraham\'s scan is better suited for larger sets of points than Giftwrapping.\\nHowever, they will produce the same result.\\n\\n\\n```lua\\nlocal points = {\\n\\tVector2.new(0, 0),\\n\\tVector2.new(1, 0),\\n\\tVector2.new(0.5, 0.5)\\n\\tVector2.new(0, 1),\\n\\tVector2.new(1, 1),\\n}\\n\\nlocal hull = VectorUtil.calculateConvexHullGrahamScan(points) -- Output: {Vector2.new(0, 0), Vector2.new(1, 0), Vector2.new(1, 1), Vector2.new(0, 1)}\\n```","params":[{"name":"points","desc":"The points to calculate the convex hull of.","lua_type":"{Vector2}"}],"returns":[{"desc":"The convex hull of the points.","lua_type":"{Vector2}"}],"function_type":"static","source":{"line":604,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"calculateConvexHullGiftWrap","desc":"Uses the Giftwrapping algorithm (Jarvis March) to calculate the convex hull of a set of 2D points.\\nGiftwrapping is better suited for smaller sets of points than Graham\'s scan.\\nHowever, they will produce the same result.\\n\\n\\n```lua\\nlocal points = {\\n\\tVector2.new(0, 0),\\n\\tVector2.new(1, 0),\\n\\tVector2.new(0.5, 0.5)\\n\\tVector2.new(0, 1),\\n\\tVector2.new(1, 1),\\n}\\n\\nlocal hull = VectorUtil.calculateConvexHullGiftWrap(points) -- Output: {Vector2.new(0, 0), Vector2.new(1, 0), Vector2.new(1, 1), Vector2.new(0, 1)}\\n```","params":[{"name":"points","desc":"The points to calculate the convex hull of.","lua_type":"{Vector2}"}],"returns":[{"desc":"The convex hull of the points.","lua_type":"{Vector2}"}],"function_type":"static","source":{"line":668,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"reflect","desc":"Reflects a vector off a surface normal.","params":[{"name":"dir","desc":"The vector to reflect.","lua_type":"Vector3"},{"name":"normal","desc":"The normal of the surface to reflect off of.","lua_type":"Vector3"}],"returns":[{"desc":"The reflected vector.","lua_type":"Vector3"}],"function_type":"static","source":{"line":723,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"reflectIgnoringY","desc":"Reflects a vector ignoring the Y component of the surface normal.\\nThis is useful when you want to keep reflections on a 2D plane.","params":[{"name":"dir","desc":"The vector to reflect.","lua_type":"Vector3"},{"name":"surfaceNormal","desc":"The normal of the surface to reflect off of.","lua_type":"Vector3"}],"returns":[{"desc":"The reflected vector.","lua_type":"Vector3"}],"function_type":"static","source":{"line":734,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"unpack","desc":"Splits a Vector into its components.","params":[{"name":"Vector","desc":"","lua_type":"Vector"}],"returns":[{"desc":"","lua_type":"...number"}],"function_type":"static","source":{"line":44,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"snap","desc":"Snaps a Vector to the nearest multiple of the given number for each coordinate.","params":[{"name":"vector","desc":"","lua_type":"T & Vector"},{"name":"snapToNearestMultiple","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Vector\\r\\n"}],"function_type":"static","source":{"line":54,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"roundLength","desc":"Rounds a Vectors length to the nearest multiple of the given number.","params":[{"name":"vector","desc":"","lua_type":"T & Vector"},{"name":"increment","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"T\\r\\n"}],"function_type":"static","tags":["Vector2","Vector3"],"source":{"line":73,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"randomUnitVector","desc":"Returns a random unit vector3. Evenly distributes around the unit sphere.","params":[],"returns":[{"desc":"","lua_type":"Vector3\\r\\n"}],"function_type":"static","source":{"line":81,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"truncate","desc":"Truncates the length of a vector such that if it exceeds the given length, it will be truncated to that length.","params":[{"name":"Vector","desc":"The vector to truncate.","lua_type":"T & Vector"},{"name":"maxLength","desc":"The maximum length of the vector.","lua_type":"number"}],"returns":[{"desc":"The truncated vector.","lua_type":"Vector"}],"function_type":"static","source":{"line":91,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"getAngle","desc":"Returns the angle of a Vector2 relative to the X axis.","params":[{"name":"vector","desc":"","lua_type":"Vector2"}],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"static","source":{"line":102,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"getAngleBetween","desc":"Returns the shortest angle between two vectors in Radians.","params":[{"name":"firstVector","desc":"","lua_type":"Vector"},{"name":"secondVector","desc":"","lua_type":"Vector"}],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"static","source":{"line":109,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"getSignedAngleBetweenVector3s","desc":"Returns a signed angle in radians between two Vector3s around a given axis.\\nThe sign is calculated counter-clockwise, left of first vector is positive, right of first vector is negative.","params":[{"name":"firstVector","desc":"The start of the angle","lua_type":"Vector3"},{"name":"secondVector","desc":"The end of the angle","lua_type":"Vector3"},{"name":"axis","desc":"The axis to rotate around","lua_type":"Vector3"}],"returns":[{"desc":"The signed angle between the two vectors in radians.","lua_type":"number"}],"function_type":"static","source":{"line":121,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"getSignedAngleBetweenVector2s","desc":"Returns a signed angle in radians between two vectors.\\nThe sign is calculated counter-clockwise, left of first\\nvector is positive, right of first vector is negative.","params":[{"name":"firstVector","desc":"The start of the angle","lua_type":"Vector2"},{"name":"secondVector","desc":"The end of the angle","lua_type":"Vector2"}],"returns":[{"desc":"The signed angle between the two vectors in radians.","lua_type":"number"}],"function_type":"static","source":{"line":145,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"isNaN","desc":"Returns a CFrame that ... [DOCUMENTATION NEEDED] (Used for Slerping)","params":[{"name":"vector","desc":"","lua_type":"Vector"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","ignore":true,"source":{"line":153,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"isNaN","desc":"Checks if a given vector is NaN.","params":[{"name":"vector","desc":"","lua_type":"Vector"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":164,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"abs","desc":"Returns the absolute value of the Vector","params":[{"name":"Vector","desc":"","lua_type":"T & Vector"}],"returns":[{"desc":"","lua_type":"T\\r\\n"}],"function_type":"static","source":{"line":171,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"sign","desc":"Returns a Vector where each component is the sign of the original Vector.","params":[{"name":"Vector","desc":"","lua_type":"T & Vector"}],"returns":[{"desc":"","lua_type":"T\\r\\n"}],"function_type":"static","source":{"line":181,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"normalize","desc":"Safely Normalizes a Vector.","params":[{"name":"Vector","desc":"","lua_type":"T & Vector"}],"returns":[{"desc":"","lua_type":"T\\r\\n"}],"function_type":"static","source":{"line":191,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"flattenY","desc":"Flattens a Vector3 on its Y axis","params":[{"name":"Vector","desc":"The Vector3 to flatten.","lua_type":"Vector3"},{"name":"newY","desc":"the height to flatten the vector to. Defaults to 0.","lua_type":"number?"}],"returns":[{"desc":"The flattened Vector3.","lua_type":"Vector3"}],"function_type":"static","source":{"line":201,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"flatten","desc":"Flattens a given Vector3 on a specified axis","params":[{"name":"Vector","desc":"The Vector3 to flatten.","lua_type":"Vector3"},{"name":"axis","desc":"The axis to flatten the vector on. Defaults to \\"Y\\".","lua_type":"Enum.Axis"},{"name":"defaultValue","desc":"The value to set the flattened axis to. Defaults to 0.","lua_type":"number?"}],"returns":[{"desc":"The flattened Vector3.","lua_type":"Vector3"}],"function_type":"static","source":{"line":212,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"getAxis","desc":"Takes a Vector and removes all values except the specified Axis.","params":[{"name":"vector","desc":"The Vector to pull from","lua_type":"Vector3"},{"name":"axis","desc":"The axis to get","lua_type":"Enum.Axis"}],"returns":[{"desc":"The returned Vector containing only the specified axis.","lua_type":"Vector3"}],"function_type":"static","source":{"line":231,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"setAxis","desc":"Takes a Vector and sets the axis value to the specified number.","params":[{"name":"vector","desc":"The Vector to change from","lua_type":"Vector3"},{"name":"axis","desc":"The axis to set","lua_type":"Enum.Axis"},{"name":"value","desc":"The new value of the axis","lua_type":"number"}],"returns":[{"desc":"The adjusted Vector","lua_type":"Vector3"}],"function_type":"static","source":{"line":242,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"rotateVector3","desc":"Rotates a vector about its axis by the given angles.\\nTakes a CFrame.Angles object as the angles to rotate by. Works similarly to rotating a CFrame.\\n\\nrotateVector(Vector3.new(1,0,0), CFrame.Angles(0,math.pi,0)) -- Output: Vector3.new(-1,0,0)","params":[{"name":"vectorToRotate","desc":"The vector to rotate.","lua_type":"Vector3"},{"name":"anglesToRotate","desc":"The angles to rotate the vector by.","lua_type":"({number} | Vector3 | CFrame)"}],"returns":[{"desc":"The rotated vector.","lua_type":"Vector3"}],"function_type":"static","source":{"line":263,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"rotateVector2","desc":"Rotates a vector2 by a given amount of radians.","params":[{"name":"vectorToRotate","desc":"The vector to rotate.","lua_type":"Vector2"},{"name":"angle","desc":"The angle [In Radians] to rotate the vector by.","lua_type":"number"}],"returns":[{"desc":"The rotated vector.","lua_type":"Vector2"}],"function_type":"static","source":{"line":281,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"rotateVector","desc":"Rotates a vector.","params":[{"name":"vector","desc":"","lua_type":"Vector"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Vector"}],"function_type":"static","ignore":true,"source":{"line":296,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"closestPointOnLine","desc":"Finds the closest point on a line to a given point.","params":[{"name":"refPoint","desc":"The point to find the closest point to.","lua_type":"Vector3"},{"name":"linePoint","desc":"A point along the line.","lua_type":"Vector3"},{"name":"lineDirection","desc":"The direction of the line.","lua_type":"Vector3"}],"returns":[{"desc":"The closest point on the line to the reference point.","lua_type":"Vector3"}],"function_type":"static","source":{"line":312,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"closestPointsBetweenLines","desc":"Finds the closest two points on two lines.\\nThe lines are defined by some point along them and a direction","params":[{"name":"point1","desc":"A point along the first line.","lua_type":"Vector3"},{"name":"direction1","desc":"The direction of the first line.","lua_type":"Vector3"},{"name":"point2","desc":"A point along the second line.","lua_type":"Vector3"},{"name":"direction2","desc":"The direction of the second line.","lua_type":"Vector3"}],"returns":[{"desc":"The closest point on the first line.","lua_type":"Vector2"},{"desc":"The closest point on the second line.","lua_type":"Vector2"}],"function_type":"static","source":{"line":327,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"planeIntersectionPoint","desc":"Finds the intersection point of a line and a plane.","params":[{"name":"lineOrigin","desc":"A point along the line.","lua_type":"Vector3"},{"name":"lineDirection","desc":"The direction of the line.","lua_type":"Vector3"},{"name":"planeOrigin","desc":"A point on the plane.","lua_type":"Vector3"},{"name":"planeNormal","desc":"The normal of the plane.","lua_type":"Vector3"}],"returns":[{"desc":"The intersection point of the line and the plane if one exists.","lua_type":"Vector3?"}],"function_type":"static","source":{"line":351,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"lineIntersectsSphere","desc":"Tests whether or not a line of infinite length intersects a sphere at some point.","params":[{"name":"lineOrigin","desc":"A point along the line.","lua_type":"Vector3"},{"name":"lineDirection","desc":"The direction of the line.","lua_type":"Vector3"},{"name":"sphereOrigin","desc":"The origin of the sphere.","lua_type":"Vector3"},{"name":"sphereRadius","desc":"The radius of the sphere.","lua_type":"number"}],"returns":[{"desc":"Whether or not the line intersects the sphere.","lua_type":"boolean"}],"function_type":"static","source":{"line":371,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"lineSegmentIntersectsSphere","desc":"Tests whether or not a line **segment** intersects a sphere at some point.\\nOnly returns true if the intersection point is between the two points of the line segment.","params":[{"name":"linePoint1","desc":"The start point of the line segment.","lua_type":"Vector3"},{"name":"linePoint2","desc":"The end point of the line segment.","lua_type":"Vector3"},{"name":"sphereOrigin","desc":"The center point of the sphere.","lua_type":"Vector3"},{"name":"sphereRadius","desc":"The radius of the sphere.","lua_type":"number"}],"returns":[{"desc":"Whether or not the line segment intersects the sphere.","lua_type":"boolean"}],"function_type":"static","source":{"line":387,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"calculatePlaneFromPoints","desc":"Creates a plane from three points. The normal of the plane is determined by the input order of the points.\\nPlanes are used by other RailUtil.Vector functions in order to allow precomputation.","params":[{"name":"p1","desc":"The first point.","lua_type":"Vector3"},{"name":"p2","desc":"The second point.","lua_type":"Vector3"},{"name":"p3","desc":"The third point.","lua_type":"Vector3"}],"returns":[{"desc":"The plane defined by the three points.","lua_type":"Plane"}],"function_type":"static","source":{"line":413,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"calculatePlaneFromPointAndNormal","desc":"Creates a plane from a point and a normal.\\nPlanes are used by other RailUtil.Vector functions in order to allow precomputation.","params":[{"name":"point","desc":"A point on the plane.","lua_type":"Vector3"},{"name":"normal","desc":"The normal of the plane.","lua_type":"Vector3"}],"returns":[{"desc":"The plane defined by the point and normal.","lua_type":"Plane"}],"function_type":"static","source":{"line":425,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"pointLiesOnPlane","desc":"Checks if a point lies on a plane. Use one of the `calculatePlane` functions to generate a plane.\\n\\n```lua\\nlocal plane = VectorUtil.calculatePlaneFromPoints(Vector3.new(0,0,0), Vector3.new(1,0,0), Vector3.new(0,1,0))\\nlocal point = Vector3.new(1,1,0)\\n\\nVectorUtil.pointLiesOnPlane(point plane) -- Output: true\\n```","params":[{"name":"point","desc":"The point to check.","lua_type":"Vector3"},{"name":"plane","desc":"The plane to check against.","lua_type":"Plane"}],"returns":[{"desc":"Whether or not the point lies on the plane.","lua_type":"boolean"}],"function_type":"static","source":{"line":443,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"projectVectorToPlane","desc":"Projects a vector onto a plane defined by a normal.\\n\\n```lua\\nlocal dir = Vector3.new(1, 1, 1)\\nlocal normal = Vector3.new(0, 1, 0)\\n\\nVectorUtil.projectVectorToPlane(dir, normal) -- Output: Vector3.new(1, 0, 1)\\n```","params":[{"name":"dir","desc":"The vector to project.","lua_type":"Vector3"},{"name":"normal","desc":"The normal of the plane to project onto. Defaults to Vector3.new(0, 1, 0).","lua_type":"Vector3?"}],"returns":[{"desc":"The projected vector.","lua_type":"Vector3"}],"function_type":"static","source":{"line":461,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"pointInPolygon2D","desc":"Checks if a point is inside a polygon defined by a set of points.\\nThe points *must* be in order within the array, this order defines the winding of the polygon.\\n\\n\\n```lua\\nlocal point = Vector2.new(0, 0)\\nlocal polygon = {\\n\\tVector2.new(1, 0),\\n\\tVector2.new(0, 1),\\n\\tVector2.new(0, 0)\\n}\\n\\nVectorUtil.pointInPolygon2D(point, polygon) -- Output: true\\n```","params":[{"name":"point","desc":"The point to check.","lua_type":"Vector2"},{"name":"polygon","desc":"The polygon to check against.","lua_type":"{Vector2}"}],"returns":[{"desc":"Whether or not the point is inside the polygon.","lua_type":"boolean"}],"function_type":"static","source":{"line":492,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"pointInPolygon3D","desc":"Checks if a point is inside a polygon defined by a set of points and a normal. The polygon has infinite height, extending in both directions\\nof the surface normal. The points that define the polygon must be in order within the array if you aren\'t using the Hull flag.\\nThe order of the points defines the winding of the polygon.\\n\\nAllows for checking against the convex hull of the polygon by setting the `_useHull` parameter to true.\\nThis should be used only when needed as it can result in a higher computational cost in some scenarios.\\n\\n\\n```lua\\nlocal point = Vector3.new(0, 0, 0)\\nlocal polygon = {\\n\\tVector3.new(1, 0, 0),\\n\\tVector3.new(0, 1, 0),\\n\\tVector3.new(0, 0, 1)\\n}\\nlocal normal = Vector3.new(1, 1, 1)\\n\\nVectorUtil.pointInPolygon3D(point, polygon, normal) -- Output: true\\n```","params":[{"name":"point","desc":"The point to check.","lua_type":"Vector3"},{"name":"polygon","desc":"The polygon to check against.","lua_type":"{Vector3}"},{"name":"_normal","desc":"The normal of the polygon. Defaults to Vector3.new(0, 1, 0).","lua_type":"Vector3?"},{"name":"_useHull","desc":"Whether or not to use the convex hull of the polygon. Defaults to false.","lua_type":"boolean?"}],"returns":[{"desc":"Whether or not the point is inside the polygon.","lua_type":"boolean"}],"function_type":"static","source":{"line":538,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"calculateConvexHullGrahamScan","desc":"Uses Graham\'s scan algorithm to calculate the convex hull of a set of 2D points.\\nGraham\'s scan is better suited for larger sets of points than Giftwrapping.\\nHowever, they will produce the same result.\\n\\n\\n```lua\\nlocal points = {\\n\\tVector2.new(0, 0),\\n\\tVector2.new(1, 0),\\n\\tVector2.new(0.5, 0.5)\\n\\tVector2.new(0, 1),\\n\\tVector2.new(1, 1),\\n}\\n\\nlocal hull = VectorUtil.calculateConvexHullGrahamScan(points) -- Output: {Vector2.new(0, 0), Vector2.new(1, 0), Vector2.new(1, 1), Vector2.new(0, 1)}\\n```","params":[{"name":"points","desc":"The points to calculate the convex hull of.","lua_type":"{Vector2}"}],"returns":[{"desc":"The convex hull of the points.","lua_type":"{Vector2}"}],"function_type":"static","source":{"line":604,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"calculateConvexHullGiftWrap","desc":"Uses the Giftwrapping algorithm (Jarvis March) to calculate the convex hull of a set of 2D points.\\nGiftwrapping is better suited for smaller sets of points than Graham\'s scan.\\nHowever, they will produce the same result.\\n\\n\\n```lua\\nlocal points = {\\n\\tVector2.new(0, 0),\\n\\tVector2.new(1, 0),\\n\\tVector2.new(0.5, 0.5)\\n\\tVector2.new(0, 1),\\n\\tVector2.new(1, 1),\\n}\\n\\nlocal hull = VectorUtil.calculateConvexHullGiftWrap(points) -- Output: {Vector2.new(0, 0), Vector2.new(1, 0), Vector2.new(1, 1), Vector2.new(0, 1)}\\n```","params":[{"name":"points","desc":"The points to calculate the convex hull of.","lua_type":"{Vector2}"}],"returns":[{"desc":"The convex hull of the points.","lua_type":"{Vector2}"}],"function_type":"static","source":{"line":668,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"reflect","desc":"Reflects a vector off a surface normal.","params":[{"name":"dir","desc":"The vector to reflect.","lua_type":"Vector3"},{"name":"normal","desc":"The normal of the surface to reflect off of.","lua_type":"Vector3"}],"returns":[{"desc":"The reflected vector.","lua_type":"Vector3"}],"function_type":"static","source":{"line":723,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"reflectIgnoringY","desc":"Reflects a vector ignoring the Y component of the surface normal.\\nThis is useful when you want to keep reflections on a 2D plane.","params":[{"name":"dir","desc":"The vector to reflect.","lua_type":"Vector3"},{"name":"surfaceNormal","desc":"The normal of the surface to reflect off of.","lua_type":"Vector3"}],"returns":[{"desc":"The reflected vector.","lua_type":"Vector3"}],"function_type":"static","source":{"line":734,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}}],"properties":[],"types":[{"name":"Vector","desc":"","lua_type":"Vector3 | Vector2","source":{"line":13,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"Plane","desc":"Data type representing a plane. The plane is represented by a table with 4 values. Typically used for plane intersection calculations.","lua_type":"{number}","source":{"line":20,"path":"lib/basecomponent/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"Vector","desc":"","lua_type":"Vector3 | Vector2","source":{"line":13,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}},{"name":"Plane","desc":"Data type representing a plane. The plane is represented by a table with 4 values. Typically used for plane intersection calculations.","lua_type":"{number}","source":{"line":20,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}}],"name":"VectorUtil","desc":"A library of useful vector functions.","source":{"line":38,"path":"lib/tablereplicator/_Index/raild3x_railutil@1.15.0/railutil/VectorUtil/init.luau"}}')}}]);