"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[386],{6188:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new ClientNetWire. If a ClientNetWire with the same nameSpace already exists, it will be returned instead.","params":[{"name":"nameSpace","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"ClientNetWire"}],"function_type":"static","source":{"line":173,"path":"lib/netwire/src/ClientWire.luau"}},{"name":"onReady","desc":"Returns a promise that resolves when the ClientNetWire is ready for use.","params":[{"name":"clientNetWire","desc":"","lua_type":"string | ClientNetWire"}],"returns":[{"desc":"","lua_type":"Promise<ClientNetWire>\\r\\n"}],"function_type":"static","source":{"line":282,"path":"lib/netwire/src/ClientWire.luau"}},{"name":"isReady","desc":"Can be used to check if a clientNetWire is ready for use.\\nAccepts either a ClientNetWire instance or a string name of the wire.\\nReturns `true` if the ClientNetWire is ready, `false` otherwise.","params":[{"name":"clientNetWire","desc":"","lua_type":"ClientNetWire | string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":311,"path":"lib/netwire/src/ClientWire.luau"}},{"name":"indexReady","desc":"Returns a promise that resolves when the ClientNetWire is ready for use and the index exists.\\nThe resolved value is the value of the index.","params":[{"name":"wireOrName","desc":"","lua_type":"ClientNetWire | string"},{"name":"idx","desc":"The index to wait for existence of","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Promise<...any>\\r\\n"}],"function_type":"static","source":{"line":331,"path":"lib/netwire/src/ClientWire.luau"}},{"name":"destroy","desc":"Destroys a ClientNetWire, removing it from the cache.","params":[{"name":"clientNetWire","desc":"","lua_type":"ClientNetWire"}],"returns":[],"function_type":"static","private":true,"source":{"line":352,"path":"lib/netwire/src/ClientWire.luau"}},{"name":"new","desc":"Creates a new ClientNetWire. If a ClientNetWire with the same nameSpace already exists, it will be returned instead.","params":[{"name":"nameSpace","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"ClientNetWire"}],"function_type":"static","source":{"line":173,"path":"lib/tablereplicator/_Index/raild3x_netwire@0.3.4/netwire/src/ClientWire.luau"}},{"name":"onReady","desc":"Returns a promise that resolves when the ClientNetWire is ready for use.","params":[{"name":"clientNetWire","desc":"","lua_type":"string | ClientNetWire"}],"returns":[{"desc":"","lua_type":"Promise<ClientNetWire>\\r\\n"}],"function_type":"static","source":{"line":282,"path":"lib/tablereplicator/_Index/raild3x_netwire@0.3.4/netwire/src/ClientWire.luau"}},{"name":"isReady","desc":"Can be used to check if a clientNetWire is ready for use.\\nAccepts either a ClientNetWire instance or a string name of the wire.\\nReturns `true` if the ClientNetWire is ready, `false` otherwise.","params":[{"name":"clientNetWire","desc":"","lua_type":"ClientNetWire | string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":311,"path":"lib/tablereplicator/_Index/raild3x_netwire@0.3.4/netwire/src/ClientWire.luau"}},{"name":"indexReady","desc":"Returns a promise that resolves when the ClientNetWire is ready for use and the index exists.\\nThe resolved value is the value of the index.","params":[{"name":"wireOrName","desc":"","lua_type":"ClientNetWire | string"},{"name":"idx","desc":"The index to wait for existence of","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Promise<...any>\\r\\n"}],"function_type":"static","source":{"line":331,"path":"lib/tablereplicator/_Index/raild3x_netwire@0.3.4/netwire/src/ClientWire.luau"}},{"name":"destroy","desc":"Destroys a ClientNetWire, removing it from the cache.","params":[{"name":"clientNetWire","desc":"","lua_type":"ClientNetWire"}],"returns":[],"function_type":"static","private":true,"source":{"line":352,"path":"lib/tablereplicator/_Index/raild3x_netwire@0.3.4/netwire/src/ClientWire.luau"}}],"properties":[{"name":"ClassName","desc":"","lua_type":"\\"ClientNetWire\\"","private":true,"readonly":true,"source":{"line":132,"path":"lib/netwire/src/ClientWire.luau"}},{"name":"Client","desc":"","lua_type":"ClientNetWire","realm":["Client"],"private":true,"source":{"line":386,"path":"lib/netwire/src/ClientWire.luau"}},{"name":"ClassName","desc":"","lua_type":"\\"ClientNetWire\\"","private":true,"readonly":true,"source":{"line":132,"path":"lib/tablereplicator/_Index/raild3x_netwire@0.3.4/netwire/src/ClientWire.luau"}},{"name":"Client","desc":"","lua_type":"ClientNetWire","realm":["Client"],"private":true,"source":{"line":386,"path":"lib/tablereplicator/_Index/raild3x_netwire@0.3.4/netwire/src/ClientWire.luau"}}],"types":[{"name":"ClientMiddleware","desc":"Middleware function for client-side operations.\\nReturns whether to continue processing and any modified arguments.","lua_type":"(args: {any}) -> (shouldContinue: boolean, ...any)","source":{"line":73,"path":"lib/netwire/src/NetWireTypes.luau"}},{"name":"ClientMiddleware","desc":"Middleware function for client-side operations.\\nReturns whether to continue processing and any modified arguments.","lua_type":"(args: {any}) -> (shouldContinue: boolean, ...any)","source":{"line":73,"path":"lib/tablereplicator/_Index/raild3x_netwire@0.3.4/netwire/src/NetWireTypes.luau"}}],"name":"ClientNetWire","desc":"Instance methods for ClientNetWire objects.\\nThese methods are available on created ClientNetWire instances.","realm":["Client"],"source":{"line":143,"path":"lib/tablereplicator/_Index/raild3x_netwire@0.3.4/netwire/src/ClientWire.luau"}}')}}]);