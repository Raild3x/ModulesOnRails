"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6402],{58320:e=>{e.exports=JSON.parse('{"functions":[{"name":"Get","desc":"Gets the value of the property object.\\n\\n:::caution\\nThis value might not be ready right away. Use `OnReady()` or `IsReady()`\\nbefore calling `Get()`. If not ready, this value will return `nil`.\\n:::","params":[],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","source":{"line":69,"path":"lib/comm/src/Client/ClientRemoteProperty.lua"}},{"name":"OnReady","desc":"Returns a Promise which resolves once the property object is\\nready to be used. The resolved promise will also contain the\\nvalue of the property.\\n\\n```lua\\n-- Use andThen clause:\\nclientRemoteProperty:OnReady():andThen(function(initialValue)\\n\\tprint(initialValue)\\nend)\\n\\n-- Use await:\\nlocal success, initialValue = clientRemoteProperty:OnReady():await()\\nif success then\\n\\tprint(initialValue)\\nend\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise<any>"}],"function_type":"method","source":{"line":92,"path":"lib/comm/src/Client/ClientRemoteProperty.lua"}},{"name":"IsReady","desc":"Returns `true` if the property object is ready to be\\nused. In other words, it has successfully gained\\nconnection to the server-side version and has synced\\nin the initial value.\\n\\n```lua\\nif clientRemoteProperty:IsReady() then\\n\\tlocal value = clientRemoteProperty:Get()\\nend\\n```","params":[],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","source":{"line":117,"path":"lib/comm/src/Client/ClientRemoteProperty.lua"}},{"name":"Observe","desc":"Observes the value of the property. The observer will\\nbe called right when the value is first ready, and\\nevery time the value changes. This is safe to call\\nimmediately (i.e. no need to use `IsReady` or `OnReady`\\nbefore using this method).\\n\\nObserving is essentially listening to `Changed`, but\\nalso sends the initial value right away (or at least\\nonce `OnReady` is completed).\\n\\n```lua\\nlocal function ObserveValue(value)\\n\\tprint(value)\\nend\\n\\nclientRemoteProperty:Observe(ObserveValue)\\n```","params":[{"name":"observer","desc":"","lua_type":"(any) -> nil"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":142,"path":"lib/comm/src/Client/ClientRemoteProperty.lua"}},{"name":"Destroy","desc":"Destroys the ClientRemoteProperty object.","params":[],"returns":[],"function_type":"method","source":{"line":152,"path":"lib/comm/src/Client/ClientRemoteProperty.lua"}},{"name":"Get","desc":"Gets the value of the property object.\\n\\n:::caution\\nThis value might not be ready right away. Use `OnReady()` or `IsReady()`\\nbefore calling `Get()`. If not ready, this value will return `nil`.\\n:::","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","source":{"line":532,"path":"lib/netwire/src/NetWireTypes.luau"}},{"name":"OnReady","desc":"Returns a Promise which resolves once the property object is\\nready to be used. The resolved promise will also contain the\\nvalue of the property.\\n\\n```lua\\n-- Use andThen clause:\\nclientRemoteProperty:OnReady():andThen(function(initialValue)\\n\\tprint(initialValue)\\nend)\\n\\n-- Use await:\\nlocal success, initialValue = clientRemoteProperty:OnReady():await()\\nif success then\\n\\tprint(initialValue)\\nend\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise<any>"}],"function_type":"method","source":{"line":555,"path":"lib/netwire/src/NetWireTypes.luau"}},{"name":"IsReady","desc":"Returns `true` if the property object is ready to be\\nused. In other words, it has successfully gained\\nconnection to the server-side version and has synced\\nin the initial value.\\n\\n```lua\\nif clientRemoteProperty:IsReady() then\\n\\tlocal value = clientRemoteProperty:Get()\\nend\\n```","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":572,"path":"lib/netwire/src/NetWireTypes.luau"}},{"name":"Observe","desc":"Observes the value of the property. The observer will\\nbe called right when the value is first ready, and\\nevery time the value changes. This is safe to call\\nimmediately (i.e. no need to use `IsReady` or `OnReady`\\nbefore using this method).\\n\\nObserving is essentially listening to `Changed`, but\\nalso sends the initial value right away (or at least\\nonce `OnReady` is completed).\\n\\n```lua\\nlocal function ObserveValue(value)\\n\\tprint(value)\\nend\\n\\nclientRemoteProperty:Observe(ObserveValue)\\n```","params":[{"name":"observer","desc":"","lua_type":"(any) -> nil"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":597,"path":"lib/netwire/src/NetWireTypes.luau"}},{"name":"Get","desc":"Gets the value of the property object.\\n\\n:::caution\\nThis value might not be ready right away. Use `OnReady()` or `IsReady()`\\nbefore calling `Get()`. If not ready, this value will return `nil`.\\n:::","params":[],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","source":{"line":71,"path":"lib/netwire/_Index/sleitnick_comm@1.0.1/comm/Client/ClientRemoteProperty.lua"}},{"name":"OnReady","desc":"Returns a Promise which resolves once the property object is\\nready to be used. The resolved promise will also contain the\\nvalue of the property.\\n\\n```lua\\n-- Use andThen clause:\\nclientRemoteProperty:OnReady():andThen(function(initialValue)\\n\\tprint(initialValue)\\nend)\\n\\n-- Use await:\\nlocal success, initialValue = clientRemoteProperty:OnReady():await()\\nif success then\\n\\tprint(initialValue)\\nend\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise<any>"}],"function_type":"method","source":{"line":94,"path":"lib/netwire/_Index/sleitnick_comm@1.0.1/comm/Client/ClientRemoteProperty.lua"}},{"name":"IsReady","desc":"Returns `true` if the property object is ready to be\\nused. In other words, it has successfully gained\\nconnection to the server-side version and has synced\\nin the initial value.\\n\\n```lua\\nif clientRemoteProperty:IsReady() then\\n\\tlocal value = clientRemoteProperty:Get()\\nend\\n```","params":[],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","source":{"line":110,"path":"lib/netwire/_Index/sleitnick_comm@1.0.1/comm/Client/ClientRemoteProperty.lua"}},{"name":"Observe","desc":"Observes the value of the property. The observer will\\nbe called right when the value is first ready, and\\nevery time the value changes. This is safe to call\\nimmediately (i.e. no need to use `IsReady` or `OnReady`\\nbefore using this method).\\n\\nObserving is essentially listening to `Changed`, but\\nalso sends the initial value right away (or at least\\nonce `OnReady` is completed).\\n\\n```lua\\nlocal function ObserveValue(value)\\n\\tprint(value)\\nend\\n\\nclientRemoteProperty:Observe(ObserveValue)\\n```","params":[{"name":"observer","desc":"","lua_type":"(any) -> nil"}],"returns":[{"desc":"","lua_type":"Connection"}],"function_type":"method","source":{"line":135,"path":"lib/netwire/_Index/sleitnick_comm@1.0.1/comm/Client/ClientRemoteProperty.lua"}},{"name":"Destroy","desc":"Destroys the ClientRemoteProperty object.","params":[],"returns":[],"function_type":"method","source":{"line":145,"path":"lib/netwire/_Index/sleitnick_comm@1.0.1/comm/Client/ClientRemoteProperty.lua"}}],"properties":[{"name":"Changed","desc":"Fires when the property receives an updated value\\nfrom the server.\\n\\n```lua\\nclientRemoteProperty.Changed:Connect(function(value)\\n\\tprint(\\"New value\\", value)\\nend)\\n```","lua_type":"Signal<any>","source":{"line":26,"path":"lib/comm/src/Client/ClientRemoteProperty.lua"}},{"name":"Changed","desc":"Fires when the property receives an updated value\\nfrom the server.\\n\\n```lua\\nclientRemoteProperty.Changed:Connect(function(value)\\n\\tprint(\\"New value\\", value)\\nend)\\n```","lua_type":"Signal<any>","source":{"line":519,"path":"lib/netwire/src/NetWireTypes.luau"}},{"name":"Changed","desc":"Fires when the property receives an updated value\\nfrom the server.\\n\\n```lua\\nclientRemoteProperty.Changed:Connect(function(value)\\n\\tprint(\\"New value\\", value)\\nend)\\n```","lua_type":"Signal<any>","source":{"line":23,"path":"lib/netwire/_Index/sleitnick_comm@1.0.1/comm/Client/ClientRemoteProperty.lua"}}],"types":[],"name":"ClientRemoteProperty","desc":"Created via `ClientComm:GetProperty()`.","realm":["Client"],"source":{"line":29,"path":"lib/netwire/_Index/sleitnick_comm@1.0.1/comm/Client/ClientRemoteProperty.lua"}}')}}]);