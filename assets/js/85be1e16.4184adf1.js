"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3256],{28175:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new ServerNetWire. If a ServerNetWire with the same nameSpace already exists, it will be returned instead.","params":[{"name":"nameSpace","desc":"","lua_type":"string | Service"}],"returns":[],"function_type":"static","tags":["constructor","static"],"source":{"line":174,"path":"lib/netwire/src/ServerWire.luau"}},{"name":"setupServiceNetworking","desc":"Creates a ServerNetWire from a Roam Service.\\nThis method will read the service\'s Name and Client table to create the NetWire.\\nThe goal of this function is to recreate the simplicity of Knit\'s networking features without\\nthe systems being coupled together. \\nIn order to access the service on the client, use `NetWire.Client(\\"SERVICE_NAME\\")`.\\n\\n```lua\\nlocal ExampleService = Roam.createService { Name = \\"ExampleService\\" }\\nExampleService.Client = {\\n    TestEvent = NetWire.createEvent()\\n}\\n\\nfunction ExampleService.Client:Greeting(plr: Player, msg: string)\\n    print(plr.Name, \\"said\\", msg) \\nend\\n\\n----------------------------------------------------------------\\n\\nfunction ExampleService:RoamInit()\\n    NetWire.Server.setupServiceNetworking(self)\\nend\\n\\nfunction ExampleService:RoamStart()\\n    self.Client.TestEvent:FireAll(\\"Hello from ExampleService!\\") -- send a message to all clients\\nend\\n```\\n\\n:::caution Client Table Overwrite\\nCalling this function will overwrite the service\'s `Client` table with the NetWire.\\nYou should not store anything aside from supported NetWire objects in the Client table.\\n:::\\n\\n:::info Where to call\\nThis function should be called within the init method of the service. This is\\nto prevent netwires from being created outside of a running game.\\n:::","params":[{"name":"service","desc":"","lua_type":"Service"}],"returns":[{"desc":"","lua_type":"ServerNetWire"}],"function_type":"static","tags":["constructor","static"],"source":{"line":239,"path":"lib/netwire/src/ServerWire.luau"}},{"name":"Destroy","desc":"Destroys the NetWire and removes it from the internal cache.","params":[],"returns":[],"function_type":"method","tags":["destructor"],"source":{"line":273,"path":"lib/netwire/src/ServerWire.luau"}},{"name":"Parse","desc":"Reads through a table and adds all the methods, events, and properties to the NetWire.","params":[{"name":"tbl","desc":"","lua_type":"{[string]: ParsableValue}"}],"returns":[],"function_type":"method","private":true,"source":{"line":283,"path":"lib/netwire/src/ServerWire.luau"}},{"name":"AutoRegister","desc":"Attempts to register a value to the NetWire. It will infer the type of value and call the corresponding method.","params":[{"name":"k","desc":"","lua_type":"string"},{"name":"v","desc":"","lua_type":"ParsableValue"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"method","private":true,"source":{"line":297,"path":"lib/netwire/src/ServerWire.luau"}},{"name":"SetServer","desc":"Sets the Server index of the NetWire. Used with RemoteMethods and Services.","params":[{"name":"tbl","desc":"","lua_type":"{[any]: any}"}],"returns":[],"function_type":"method","private":true,"source":{"line":315,"path":"lib/netwire/src/ServerWire.luau"}},{"name":"RegisterEvent","desc":"Creates a remote event with the given name.\\n\\n\\nServer Documentation: https://sleitnick.github.io/RbxUtil/api/RemoteSignal\\n\\nClient Documentation: https://sleitnick.github.io/RbxUtil/api/ClientRemoteSignal\\n\\n```lua\\n-- Server Side\\nlocal myWire = NetWire.Server(\\"MyWire\\")\\n\\nmyWire.TestEvent = NetWire.createEvent()\\n\\nmyWire.TestEvent:Connect(function(plr: Player, someArg)\\n    print(someArg)\\nend)\\n\\nmyWire.TestEvent:FireAll(\\"Hello from the server!\\")\\n\\n---------------------------------------------------------\\n-- Client Side\\nlocal myWire = NetWire.Client(\\"MyWire\\")\\n\\nmyWire.TestEvent:Connect(function(someArg)\\n    print(someArg)\\nend)\\n\\nmyWire.TestEvent:Fire(\\"Hello from the client!\\")\\n```","params":[{"name":"eventName","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":351,"path":"lib/netwire/src/ServerWire.luau"}},{"name":"RegisterProperty","desc":"Creates a remote property with the given name.\\n\\nServer Documentation: https://sleitnick.github.io/RbxUtil/api/RemoteProperty\\n\\nClient Documentation: https://sleitnick.github.io/RbxUtil/api/ClientRemoteProperty\\n\\n```lua\\n-- Server Side\\nlocal myWire = NetWire.Server(\\"MyWire\\")\\n\\nmyWire.TestProperty = NetWire.createProperty(\\"Hello\\")\\n\\n---------------------------------------------------------\\n-- Client Side\\nlocal myWire = NetWire.Client(\\"MyWire\\")\\n\\nif myWire.TestProperty:IsReady() then -- Check if its ready first\\n    print( myWire.TestProperty:Get() ) -- \\"Hello\\"\\nend\\n```","params":[{"name":"propertyName","desc":"","lua_type":"string"},{"name":"initialValue","desc":"","lua_type":"any?"}],"returns":[],"function_type":"method","source":{"line":382,"path":"lib/netwire/src/ServerWire.luau"}},{"name":"RegisterMethod","desc":"Creates a remote function with the given name. This is not suggested to be used by end users; instead\\nyou should just append a function to a netwire object and it will properly wrap it for you.\\n\\n```lua\\n-- Server Side\\nlocal myWire = NetWire.Server(\\"MyWire\\")\\n\\nfunction myWire:TestMethod(plr: Player, arg: number)\\n    return arg * 2\\nend\\n\\n---------------------------------------------------------\\n-- Client Side\\nlocal myWire = NetWire.Client(\\"MyWire\\")\\n\\nmyWire:TestMethod(5):andThen(function(result)\\n    print(result) -- 10\\nend)\\n```","params":[{"name":"functionName","desc":"","lua_type":"string"},{"name":"callback","desc":"","lua_type":"(self: any, plr: Player, ...any) -> (...any)"},{"name":"tbl","desc":"","lua_type":"{}?"}],"returns":[],"function_type":"method","source":{"line":413,"path":"lib/netwire/src/ServerWire.luau"}}],"properties":[{"name":"ClassName","desc":"","lua_type":"\\"ServerNetWire\\"","readonly":true,"source":{"line":165,"path":"lib/netwire/src/ServerWire.luau"}}],"types":[],"name":"ServerNetWire","desc":"Uses Sleitnick\'s Comm under the hood. Provides a simple to use interface for networking across\\nyour codebase. This is a server side only module. To begin using it, you must first create a\\nServerNetWire object. This can be done by calling NetWire.Server, or by calling NetWire.Server.new\\n\\nThe following variables are all equivalent as NetWires are memoized by their namespace,\\nso creating a new one with the same namespace will return the same object.\\n```lua\\nlocal TestNetWire1 = NetWire.Server.new(\\"MyNetWire\\")\\nlocal TestNetWire2 = NetWire.Server(\\"MyNetWire\\")\\n\\nprint(TestNetWire1 == TestNetWire2) -- true \\n```\\n:::info\\nYou can also create a by calling the package directly, but this is not encouraged as it\\nobscures the RunContext in which the NetWire is being created.\\n```lua\\nlocal TestNetWire3 = NetWire(\\"MyNetWire\\")\\n```\\n:::\\n\\nYou can then create client exposed events by registering them with the method or setting their index:\\nThe following two lines accomplish the same thing.\\n```lua\\nTestNetWire:RegisterEvent(\\"TestEvent\\")\\nTestNetWire.TestEvent = NetWire.createEvent()\\n```\\nMore examples can be found under the respective construction methods.","realm":["Server"],"source":{"line":35,"path":"lib/netwire/src/ServerWire.luau"}}')}}]);