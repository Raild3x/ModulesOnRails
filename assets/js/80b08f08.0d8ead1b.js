"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9301],{40751:e=>{e.exports=JSON.parse('{"functions":[{"name":"createService","desc":"Creates a Service/Table with Roam to be Initialized and Started when Roam starts.\\nCannot be called after Roam has been started.\\n\\n```lua\\nlocal Roam = require(ReplicatedStorage.Roam)\\n\\nlocal MyService = Roam.createService { Name = \\"MyService\\" }\\n\\nfunction MyService:DoSomething()\\n\\tprint(\\"yeee haw!\\")\\nend\\n\\n-- Default StartMethodName is \\"RoamStart\\" (Can be overriden in service creation config)\\nfunction MyService:RoamStart()\\n\\tprint(\\"MyService started!\\")\\n\\tself:DoSomething()\\nend\\n\\n-- Default InitMethodName is \\"RoamInit\\" (Can be overriden in service creation config)\\nfunction MyService:RoamInit()\\n\\tprint(\\"MyService initialized!\\")\\nend\\n\\nreturn MyService\\n```","params":[{"name":"serviceDef","desc":"","lua_type":"ServiceConfig"}],"returns":[{"desc":"","lua_type":"Service\\r\\n"}],"function_type":"static","source":{"line":238,"path":"lib/roam/src/init.lua"}},{"name":"registerService","desc":"Registers a Service/Table with Roam to be Initialized and Started when Roam starts.\\nCannot be called after Roam has been started. This method was added to allow for easy\\nbackporting of existing services to Roam. This is an alternative method to setting up\\nservices over using `createService`.\\n\\n\\n```lua -- MyRegisteredService.lua\\nlocal MyRegisteredService = {}\\n\\nfunction MyRegisteredService:Start()\\n\\tprint(\\"MyRegisteredService started!\\")\\nend\\n\\nfunction MyRegisteredService:Init()\\n\\tprint(\\"MyRegisteredService initialized!\\")\\nend\\n\\nlocal Roam = require(Packages.Roam)\\nRoam.registerService(MyRegisteredService, \\"MyRegisteredService\\")\\n\\nreturn MyRegisteredService\\n```","params":[{"name":"service","desc":"","lua_type":"Service"},{"name":"serviceConfig","desc":"","lua_type":"(ServiceConfig | string)?"}],"returns":[{"desc":"","lua_type":"Service\\r\\n"}],"function_type":"static","source":{"line":285,"path":"lib/roam/src/init.lua"}},{"name":"requireModules","desc":"Requires all the modules that are children of the given parent. This is an easy\\nway to quickly load all services that might be in a folder. Takes an optional predicate\\nfunction to filter which modules are loaded. Services collected this way must not yield.\\n- `DeepSearch` -> whether it checks descendants or just children\\n- `RequirePredicate` -> a predicate function that determines whether a module should be required\\n- `IgnoreDescendantsPredicate` -> A Predicate for whether the Descendants of the Module should be Searched (Only matters if DeepSearch is true)\\n\\n```lua\\nlocal pred = function(obj: ModuleScript): boolean\\n\\treturn obj.Name:match(\\"Service$\\") ~= nil\\nend\\n\\nRoam.requireModules(ReplicatedStorage.Shared, {\\n\\tDeepSearch = true,\\n\\tRequirePredicate = pred,\\n\\tIgnoreDescendantsPredicate = function(obj: Instance): boolean\\n\\t\\treturn obj.Name == \\"Ignore\\"\\n\\tend,\\n})\\n```","params":[{"name":"parents","desc":"","lua_type":"Instance | { Instance }"},{"name":"config","desc":"","lua_type":"{\\r\\n\\t\\tDeepSearch: boolean?,\\r\\n\\t\\tRequirePredicate: ((obj: ModuleScript) -> boolean)?,\\r\\n\\t\\tIgnoreDescendantsPredicate: ((obj: Instance) -> boolean)?,\\r\\n\\t}?\\r\\n"}],"returns":[{"desc":"","lua_type":"{ Service }\\r\\n"}],"function_type":"static","source":{"line":343,"path":"lib/roam/src/init.lua"}},{"name":"getNameFromService","desc":"Fetches the name of a registered Service.","params":[{"name":"service","desc":"","lua_type":"Service"}],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"static","source":{"line":397,"path":"lib/roam/src/init.lua"}},{"name":"getService","desc":"Fetches a registered Service by name.\\nCannot be called until Roam has been started.","params":[{"name":"serviceName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Service\\r\\n"}],"function_type":"static","source":{"line":405,"path":"lib/roam/src/init.lua"}},{"name":"start","desc":"Starts Roam. Should only be called once.\\nOptional argument `postInitPreStart` is a function that is called\\nafter all services have been initialized, but before they are started.\\n\\n:::caution\\nBe sure that all services have been created _before_\\ncalling `Start`. Services cannot be added later.\\n:::\\n\\n```lua\\nRoam.start()\\n:andThenCall(print, \\"Roam started!\\")\\n:catch(warn)\\n```","params":[{"name":"postInitPreStart","desc":"","lua_type":"(() -> (Promise?))?"}],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":432,"path":"lib/roam/src/init.lua"}},{"name":"onStart","desc":"Returns a promise that is resolved once Roam has started. This is useful\\nfor any code that needs to tie into Roam services but is not the script\\nthat called `Start`.\\n```lua\\nRoam.onStart():andThen(function()\\n\\tlocal MyService = Roam.Services.MyService\\n\\tMyService:DoSomething()\\nend):catch(warn)\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":574,"path":"lib/roam/src/init.lua"}},{"name":"isReady","desc":"Returns whether or not Roam has been successfully started and is ready for external access.","params":[],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":585,"path":"lib/roam/src/init.lua"}}],"properties":[{"name":"ClassName","desc":"The ClassName of the Roam module.","lua_type":"\\"Roam\\"","source":{"line":197,"path":"lib/roam/src/init.lua"}},{"name":"Debug","desc":"Whether or not to print debug messages. Default is false.","lua_type":"boolean","source":{"line":203,"path":"lib/roam/src/init.lua"}},{"name":"Bootstrappers","desc":"A table of generic bootstrappers for Roam / Orion.","lua_type":"{Server: (script: Script) -> (), Client: (script: Script) -> ()}","source":{"line":209,"path":"lib/roam/src/init.lua"}}],"types":[{"name":"ServiceConfig","desc":"```lua\\nlocal myOtherService = require(ReplicatedStorage.MyOtherService)\\n\\nlocal MyService = Roam.createService {\\n\\tName = \\"MyService\\",\\n\\tRequiredServices = {myOtherService},\\n}\\n```\\n\\n:::caution Deffering RequiredServices\\nDo NOT add services to the RequiredServices after you have created or registered the service. This will cause undefined behavior.\\n:::","fields":[{"name":"Name","lua_type":"string","desc":"Name of the Service. Must be unique. Used when accessing via .getService"},{"name":"RequiredServices","lua_type":"{Service}?","desc":"The Services that this Service depends on. Roam will ensure that these Services are initialized before this Service."},{"name":"StartMethodName","lua_type":"string?","desc":"Overrides default StartMethodName of \\"RoamStart\\""},{"name":"InitMethodName","lua_type":"string?","desc":"Overrides default InitMethodName of \\"RoamInit\\""}],"source":{"line":114,"path":"lib/roam/src/init.lua"}}],"name":"Roam","desc":"Roam follows a design pattern similar to Knit, but is more lightweight (Shoutout\\nto Stephen Leitnick [Sleitnick]). It removes all networking and replication\\nfunctionality, and instead focuses on providing a simple method to easily\\ninitialize Services given to it and provide global accessors.\\n\\nRoam gathers a collection of specified services and initializes \'syncronously\'.\\nOnce all services have been fully initialized, it then starts them \'asyncronously\' by\\nspawning their \'RoamStart\' method in a new thread.\\n\\nRoam enforces contracts to ensure that only the Services that you intend are\\ninitialized. By following the contracts of service construction/registration,\\nRoam is able to ensure that nothing that isnt intended to be initialized doesnt\\ncause any issues during the loading or start process.\\n\\n[CONTRACTS]\\n- Services must be created/registered before Roam is started.\\n- Services must be created/registered with a unique name.\\n- Services with `RoamInit` and `RoamStart` methods will have those methods\\n  called when Roam is started at the appropriate time. (Names are configurable)\\n- All Services are guaranteed safe to access in RoamStart.\\n- Only StaticMethods are safe to call prior to RoamStart.\\n\\n[EXAMPLE USAGE]\\n```lua -- init.Server.lua\\nlocal Roam = require(ReplicatedStorage.Roam)\\n\\n-- Just iterates through all the children of the given parents\\n-- and requires any module scripts that match the given predicate\\nRoam.requireModules({\\n\\tReplicatedStorage.Shared;\\n\\tServerScriptService.Server;\\n})\\n\\n-- Start Roam\\nRoam.start()\\n:andThenCall(print, \\"Roam started!\\")\\n:catch(warn)\\n\\n-- Accessing a potential Service\\nRoam.getService(\\"MyService\\"):DoSomething()\\n```","source":{"line":49,"path":"lib/roam/src/init.lua"}}')}}]);