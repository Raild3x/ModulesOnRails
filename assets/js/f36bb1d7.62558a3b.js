"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7003],{99059:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new TableState. This is used to observe and modify values in a TableManager easier.\\nEquivalent to `tblMngr:ToState(Path)`\\n```lua\\nlocal tbl = {\\n    Coins = 0;\\n    Inventory = {\\n        \\"Sword\\";\\n        \\"Shield\\";\\n    };\\n}\\n\\nlocal tblMngr = TableManager.new(tbl)\\n\\nlocal coinsState = TableState.new(tblMngr, \\"Coins\\")\\nprint( coinsState == tblMngr:ToTableState(\\"Coins\\") ) -- true\\n\\ncoinsState:Set(100) -- equivalent to `tblMngr:SetValue(\\"Coins\\", 100)`\\n\\nlocal inventoryState = TableState.new(tblMngr, \\"Inventory\\")\\ninventoryState:Insert(\\"Potion\\") -- equivalent to `tblMngr:ArrayInsert(\\"Inventory\\", \\"Potion\\")`\\n```\\n:::warning States with array values\\nYou should avoid setting states to be a particular index in array because if the array is shifted\\nthen the state can potentially be pointing to the wrong value.\\n:::","params":[{"name":"manager","desc":"","lua_type":"TableManager"},{"name":"Path","desc":"","lua_type":"Path"}],"returns":[{"desc":"","lua_type":"TableState\\r\\n"}],"function_type":"static","source":{"line":54,"path":"lib/tablemanager/src/TableState.luau"}},{"name":"_new","desc":"","params":[{"name":"manager","desc":"","lua_type":"TableManager"},{"name":"Path","desc":"","lua_type":"Path"}],"returns":[],"function_type":"static","private":true,"source":{"line":61,"path":"lib/tablemanager/src/TableState.luau"}},{"name":"Set","desc":"Sets the value this state is associated with.\\n```lua\\n:Set(999) -- Sets the value itself to 999\\n:Set(1, 999) -- Sets the value at index 1 to 999 (State must be an array)\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":106,"path":"lib/tablemanager/src/TableState.luau"}},{"name":"Get","desc":"Gets the value this state is associated with.\\nTakes an optional argument to specify the index of the array to get.\\n```lua\\n:Get() -- Gets the value itself\\n:Get(1) -- Gets the value at index 1 of the state (State must be an array) (Equivalent to :Get()[1])\\n```","params":[{"name":"index","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","source":{"line":119,"path":"lib/tablemanager/src/TableState.luau"}},{"name":"Increment","desc":"Increments the value this state is associated with.\\n```lua\\n:Increment(999) -- Increments the value itself by 999\\n:Increment(1, 999) -- Increments the value at index 1 by 999 (State must be an array)\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","source":{"line":130,"path":"lib/tablemanager/src/TableState.luau"}},{"name":"Insert","desc":"Inserts a value into the array this state is associated with.\\n```lua\\n:Insert(999) -- Appends 999 onto the array\\n:Insert(5, 999) -- Inserts 999 at index 5 of the array\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":141,"path":"lib/tablemanager/src/TableState.luau"}},{"name":"Remove","desc":"Removes the value at the given index from the array this state is associated with.","params":[{"name":"index","desc":"","lua_type":"number"}],"returns":[{"desc":"The removed value.","lua_type":"any"}],"function_type":"method","source":{"line":149,"path":"lib/tablemanager/src/TableState.luau"}},{"name":"RemoveFirstValue","desc":"Removes the first value that matches the given value from the array this state is associated with.","params":[{"name":"valueToFind","desc":"","lua_type":"any"}],"returns":[{"desc":"The index of the removed value.","lua_type":"number"}],"function_type":"method","source":{"line":157,"path":"lib/tablemanager/src/TableState.luau"}},{"name":"Observe","desc":"Observes changes to the value this state is associated with. Also fires immediately.\\nSee [TableManager:Observe](TableManager.md#observe) for more information.","params":[{"name":"fn","desc":"","lua_type":"(new: any) -> ()"}],"returns":[{"desc":"","lua_type":"() -> ()"}],"function_type":"method","source":{"line":165,"path":"lib/tablemanager/src/TableState.luau"}},{"name":"new","desc":"Creates a new TableState. This is used to observe and modify values in a TableManager easier.\\nEquivalent to `tblMngr:ToState(Path)`\\n```lua\\nlocal tbl = {\\n    Coins = 0;\\n    Inventory = {\\n        \\"Sword\\";\\n        \\"Shield\\";\\n    };\\n}\\n\\nlocal tblMngr = TableManager.new(tbl)\\n\\nlocal coinsState = TableState.new(tblMngr, \\"Coins\\")\\nprint( coinsState == tblMngr:ToTableState(\\"Coins\\") ) -- true\\n\\ncoinsState:Set(100) -- equivalent to `tblMngr:SetValue(\\"Coins\\", 100)`\\n\\nlocal inventoryState = TableState.new(tblMngr, \\"Inventory\\")\\ninventoryState:Insert(\\"Potion\\") -- equivalent to `tblMngr:ArrayInsert(\\"Inventory\\", \\"Potion\\")`\\n```\\n:::warning States with array values\\nYou should avoid setting states to be a particular index in array because if the array is shifted\\nthen the state can potentially be pointing to the wrong value.\\n:::","params":[{"name":"manager","desc":"","lua_type":"TableManager"},{"name":"Path","desc":"","lua_type":"Path"}],"returns":[{"desc":"","lua_type":"TableState\\r\\n"}],"function_type":"static","source":{"line":54,"path":"lib/tablereplicator/_Index/raild3x_tablemanager@0.2.2/tablemanager/src/TableState.luau"}},{"name":"_new","desc":"","params":[{"name":"manager","desc":"","lua_type":"TableManager"},{"name":"Path","desc":"","lua_type":"Path"}],"returns":[],"function_type":"static","private":true,"source":{"line":61,"path":"lib/tablereplicator/_Index/raild3x_tablemanager@0.2.2/tablemanager/src/TableState.luau"}},{"name":"Set","desc":"Sets the value this state is associated with.\\n```lua\\n:Set(999) -- Sets the value itself to 999\\n:Set(1, 999) -- Sets the value at index 1 to 999 (State must be an array)\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":106,"path":"lib/tablereplicator/_Index/raild3x_tablemanager@0.2.2/tablemanager/src/TableState.luau"}},{"name":"Get","desc":"Gets the value this state is associated with.\\nTakes an optional argument to specify the index of the array to get.\\n```lua\\n:Get() -- Gets the value itself\\n:Get(1) -- Gets the value at index 1 of the state (State must be an array) (Equivalent to :Get()[1])\\n```","params":[{"name":"index","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","source":{"line":119,"path":"lib/tablereplicator/_Index/raild3x_tablemanager@0.2.2/tablemanager/src/TableState.luau"}},{"name":"Increment","desc":"Increments the value this state is associated with.\\n```lua\\n:Increment(999) -- Increments the value itself by 999\\n:Increment(1, 999) -- Increments the value at index 1 by 999 (State must be an array)\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"any\\r\\n"}],"function_type":"method","source":{"line":130,"path":"lib/tablereplicator/_Index/raild3x_tablemanager@0.2.2/tablemanager/src/TableState.luau"}},{"name":"Insert","desc":"Inserts a value into the array this state is associated with.\\n```lua\\n:Insert(999) -- Appends 999 onto the array\\n:Insert(5, 999) -- Inserts 999 at index 5 of the array\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":141,"path":"lib/tablereplicator/_Index/raild3x_tablemanager@0.2.2/tablemanager/src/TableState.luau"}},{"name":"Remove","desc":"Removes the value at the given index from the array this state is associated with.","params":[{"name":"index","desc":"","lua_type":"number"}],"returns":[{"desc":"The removed value.","lua_type":"any"}],"function_type":"method","source":{"line":149,"path":"lib/tablereplicator/_Index/raild3x_tablemanager@0.2.2/tablemanager/src/TableState.luau"}},{"name":"RemoveFirstValue","desc":"Removes the first value that matches the given value from the array this state is associated with.","params":[{"name":"valueToFind","desc":"","lua_type":"any"}],"returns":[{"desc":"The index of the removed value.","lua_type":"number"}],"function_type":"method","source":{"line":157,"path":"lib/tablereplicator/_Index/raild3x_tablemanager@0.2.2/tablemanager/src/TableState.luau"}},{"name":"Observe","desc":"Observes changes to the value this state is associated with. Also fires immediately.\\nSee [TableManager:Observe](TableManager.md#observe) for more information.","params":[{"name":"fn","desc":"","lua_type":"(new: any) -> ()"}],"returns":[{"desc":"","lua_type":"() -> ()"}],"function_type":"method","source":{"line":165,"path":"lib/tablereplicator/_Index/raild3x_tablemanager@0.2.2/tablemanager/src/TableState.luau"}}],"properties":[],"types":[],"name":"TableState","desc":"This class is used to more easily observe and modify values in a TableManager.\\n\\n:::caution\\nTableState is not feature complete and is subject to change.\\n:::","source":{"line":12,"path":"lib/tablereplicator/_Index/raild3x_tablemanager@0.2.2/tablemanager/src/TableState.luau"}}')}}]);