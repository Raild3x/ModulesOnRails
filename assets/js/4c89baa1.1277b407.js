"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4927],{44089:e=>{e.exports=JSON.parse('{"functions":[],"properties":[{"name":"Server","desc":"Accessing this will automatically create a new DropletServerManager if one does not exist.","lua_type":"DropletServerManager","realm":["Server"],"source":{"line":154,"path":"lib/dropletmanager/src/init.lua"}},{"name":"Client","desc":"Accessing this will automatically create a new DropletClientManager if one does not exist.","lua_type":"DropletClientManager","realm":["Client"],"source":{"line":162,"path":"lib/dropletmanager/src/init.lua"}},{"name":"Util","desc":"","lua_type":"DropletUtil","source":{"line":168,"path":"lib/dropletmanager/src/init.lua"}}],"types":[{"name":"Droplet","desc":"","lua_type":"Droplet","source":{"line":132,"path":"lib/dropletmanager/src/init.lua"}},{"name":"ResourceTypeData","desc":"","lua_type":"ResourceTypeData","source":{"line":138,"path":"lib/dropletmanager/src/init.lua"}},{"name":"ResourceSpawnData","desc":"","lua_type":"ResourceSpawnData","source":{"line":144,"path":"lib/dropletmanager/src/init.lua"}}],"name":"DropletManager","desc":"The DropletManager is the main entry point for the DropletSystem API.\\nThe DropletSystem is a system for creating, managing, and collecting droplets in your game.\\nIt aims to handle all the annoying parts of droplets for you, such as physics, collection, and\\nreplication. Once you create a new droplet type, spawning them is extremely easy.\\n\\nTo get started look at DropletServerManager\'s methods `:RegisterResourceType` and `:Spawn`.\\nFor more info on how to create a new droplet type, you can take a look at the included\\n\'ExampleResourceTypeData\' file, which will show you an example of a working ResourceType\\ndata table.\\n\\nIn order for the DropletSystem to work, you must have a Server and Client DropletManager,\\naccessing them through this file on both server and client should initialize them so that\\nreplication can be established.\\n\\nThis file in particular exposes access to the Server and Client DropletManagers,\\nEnums, and several common public types.\\n\\n![Droplet Example Gif](https://media.discordapp.net/attachments/450332579351232522/1263222333573697616/RobloxStudioBeta_Pn6C5N5srT.gif?ex=66c79779&is=66c645f9&hm=7f658c7b0d92f1b2855c5323a303962dffc49295fc4678a7cb1bd86caaecf000&=&width=1080&height=805)\\n\\n----\\nEXAMPLE USAGE:\\n----\\n\\n[ExampleData.lua]\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\nlocal DropletManager = require(ReplicatedStorage.DropletManager)\\n\\ntype Droplet = DropletManager.Droplet\\n\\nreturn {\\n    Defaults = {\\n        LifeTime = NumberRange.new(20, 30);\\n    };\\n\\n    SetupDroplet = function(droplet: Droplet): table?\\n        local Model = Instance.new(\\"Model\\")\\n        Model.Name = \\"ExampleDroplet\\"\\n\\n        local Part = Instance.new(\\"Part\\")\\n        Part.Size = Vector3.one\\n        -- All attached parts should typically have these properties set to the following values\\n        Part.Anchored = false\\n        Part.CanCollide = false\\n        Part.CanTouch = false\\n        Part.CanQuery = false\\n        Part.Massless = true\\n\\n        Part.Parent = Model\\n        Model.PrimaryPart = Part\\n\\n        droplet:AttachModel(Model)\\n\\n        local SetupData = {\\n            Direction = if math.random() > 0.5 then 1 else -1 end;\\n        }\\n        return CustomData\\n    end;\\n\\n    -- Ran when the droplet is within render range of the LocalPlayer\'s Camera\\n    OnRenderUpdate = function(droplet: Droplet, rendertimeElapsed: number): CFrame?\\n        local SetupData = droplet:GetSetupData()\\n        local OffsetCFrame = CFrame.new()\\n\\n        do -- Rotating\\n            local TimeToMakeOneRotation = 4\\n            local RotationsPerSecond = 1/TimeToMakeOneRotation\\n            OffsetCFrame *= CFrame.Angles(0, tPi * RotationsPerSecond * SetupData.SpinDirection, 0)\\n        end\\n\\n        return OffsetCFrame\\n    end;\\n\\n    OnClientCollect = function(playerWhoCollected: Player, droplet: Droplet)\\n        print(playerWhoCollected, \\"collected droplet worth\\", droplet:GetValue())\\n    end;\\n\\n    OnServerCollect = function(playerWhoCollected: Player, value: any)\\n        print(playerWhoCollected, \\"collected droplet worth\\", value)\\n    end;\\n}\\n```\\n----\\nSome Server Script:\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\nlocal DropletManager = require(ReplicatedStorage.DropletManager)\\nlocal ExampleData = require(ReplicatedStorage.ExampleData)\\n\\nDropletManager.Server:RegisterResourceType(\\"Example\\", ExampleData) -- Register the Example ResourceType on the Server\\n\\nwhile true do\\n    DropletManager.Server:Spawn({\\n        ResourceType = \\"Example\\";\\n        Value = NumberRange.new(1, 5);\\n        Count = NumberRange.new(5, 10);\\n        SpawnPosition = Vector3.new(\\n            math.random(0, 10),\\n            5,\\n            math.random(0, 10)\\n        );\\n    })\\n\\n    task.wait(1)\\nend\\n```\\n----\\nSome Client Script:\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\nlocal DropletManager = require(ReplicatedStorage.DropletManager)\\nlocal ExampleData = require(ReplicatedStorage.ExampleData)\\n\\nDropletManager.Client:RegisterResourceType(\\"Example\\", ExampleData) -- Register the Example ResourceType on the Client\\n```","source":{"line":122,"path":"lib/dropletmanager/src/init.lua"}}')}}]);